#region Using

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using msfunc;
using msfunc.Forms;

using mradmin.BissClass;
using mradmin.DataAccess;
using mradmin.Forms;
//using MRMENU2.Forms;

using Gizmox.WebGUI.Common;
using Gizmox.WebGUI.Forms;
using OtherClasses.Models;

#endregion

namespace OtherClasses.FILE
{
    public partial class Admissions
    {
        billchaindtl bchain = new billchaindtl();
        Customer customers = new Customer();
        patientinfo patients = new patientinfo();
        Mrattend mrattend = new Mrattend();
        Admrecs admrecs = new Admrecs();
        PleaseWaitForm pleaseWait = new PleaseWaitForm();
        DataTable dispserv = DISPSERV.GetDISPSERV(),
            dtdocs = Dataaccess.GetAnytable("", "MR", "SELECT REFERENCE, NAME FROM DOCTORS WHERE RECTYPE = 'D' and STATUS = 'A' order by name", true),
            dtfacility = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM SERVICECENTRECODES order by name ", true),
            dtdiag = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM DIAGNOSISCODES order by name", true),
            dtbranch = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM branchcodes order by name", true),
            dtdischargereason = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM mrpatdischreasons order by name", true),
            dttariff = Dataaccess.GetAnytable("", "MR", "SELECT REFERENCE, NAME FROM TARIFF order by name", true);
        //DISPSERV dispserv = new DISPSERV();
        int itemno, recno, mdoc_seclevel, lvitemselect;
        bool newrec, mdactive, cashpaying, preauthorization, nhisgentariff, mcanadd, mcandelete, mcanalter, mautoaccommodation,
            mautofeeding, mautopnc, mcalc_prof_fees, payok, isdeleted, newrecRev, isautoGenerated, InpatientDispenseAtPharmacy, isdirect;
        string AnyCode, Anycode1, msection, mcrossref, mgroupcode, mpatientno, mgrouphead, mghgroupcode, mgrouphtype, facilitysave,
            roomsave, bedsave, woperator, lookupsource, procedure, encryptedaccesscode, mdoctor, acc_code, mservunit, sutracker, 
            rtnstring, diagnosis, mreference, pharmacyStore, savedCaseNote, retrieved_note;
        decimal mlastno, oldrate, amtsave;
        DateTime madmdate; // (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue, madmdate;
        DateTime dtmin_date = DateTime.Now;

        MR_DATA.MR_DATAvm vm;

        public Admissions(MR_DATA.MR_DATAvm VM2, string xoperator)
        {
            //InitializeComponent();
            vm = VM2;
            msection = "A"; // Session["section"].ToString(); // msmrfunc.mrGlobals.msection;
            woperator = xoperator; // Session["operator"].ToString(); // msmrfunc.mrGlobals.WOPERATOR;
            mdoctor = "";
            isdirect = false;
            isautoGenerated = false;
            mreference = "";
            getcontrolsettings();

            //initcomboboxes_SpaceDef();
            //loadserviceItems();
        }

        //private void Admissions_Load(object sender, EventArgs e)
        //{
        //	isautoGenerated = false;
        //	mreference = "";
        //	getcontrolsettings();
        //	initcomboboxes_SpaceDef();
        //	loadserviceItems();
        //	if (isdirect)
        //		this.tabReviews.Show();
        //}

        private void getcontrolsettings()
        {
            DataTable dt = Dataaccess.GetAnytable("", "MR",
                "select fccode, facilauto, facilauto, facilauto, glintenabl, dactive, pvtcode, installed, serial, ta_post from mrcontrol order by recid", false);

            // mdrugcode = dt.Rows[0]["mdrugcode"].ToString();
            pharmacyStore = dt.Rows[0]["serial"].ToString().Trim();
            InpatientDispenseAtPharmacy = (bool)dt.Rows[2]["ta_post"];

            encryptedaccesscode = dt.Rows[1]["fccode"].ToString();

            mautoaccommodation = (bool)dt.Rows[1]["facilauto"];
            mautofeeding = (bool)dt.Rows[2]["facilauto"];
            mautopnc = (bool)dt.Rows[3]["facilauto"];
            mcalc_prof_fees = (bool)dt.Rows[6]["glintenabl"];

            mdactive = (bool)dt.Rows[3]["dactive"];
            acc_code = dt.Rows[3]["pvtcode"].ToString();

            nhisgentariff = (bool)dt.Rows[5]["installed"];

            dt = Dataaccess.GetAnytable("", "MR",
                "select wseclevel, CANDELETE, CANALTER, CANADD from mrstlev where operator = '" + woperator + "'", false);

            mdoc_seclevel = (Int32)dt.Rows[0]["wseclevel"];
            mcanadd = (bool)dt.Rows[0]["canadd"];
            mcanalter = (bool)dt.Rows[0]["canalter"];
            mcandelete = (bool)dt.Rows[0]["candelete"];
        }


        //private void btngroupcode_Click(object sender, EventArgs e)
        //{
        //	Button btn = sender as Button;
        //	if (btn.Name == "btnprocedure" && !string.IsNullOrWhiteSpace(combStkItemSu.Text) || btn.Name == "btnstock" && !string.IsNullOrWhiteSpace(combProcedureSu.Text))
        //		return;
        //	if (btn.Name == "btngroupcode")
        //	{
        //		txtgroupcode_Reg.Text = "";
        //		lookupsource = "g";
        //		msmrfunc.mrGlobals.crequired = "g";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED PATIENTS";
        //	}
        //	else if (btn.Name == "btnpatientlookup")
        //	{
        //		txtPatNoReg.Text = "";
        //		lookupsource = "L";
        //		msmrfunc.mrGlobals.crequired = "L";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED PATIENTS";
        //	}
        //	else if (btn.Name == "btnprocedure" )
        //	{
        //		combProcedureSu.Text  = procedure = "";
        //		lookupsource = "SD";
        //		msmrfunc.mrGlobals.crequired = "SD"; //SERVICE DESCRIPTIONS
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR [ALL] DEFINED INVESTIGATIONS/PROCEDURES";
        //	}
        //	else if (btn.Name == "btnstock" )
        //	{
        //		combStkItemSu.Text  = "";
        //		lookupsource = "STK";
        //		msmrfunc.mrGlobals.crequired = "s"; //Stock
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED STOCK ITEMS IN ALL STORES";
        //	}
        //	else if (btn.Name == "btnReference" ) //at registration
        //	{
        //		string xstring = chkCurrntAdmReg.Checked ? "[CURRENT ADMISSIONS]" : "[ALL]";
        //		txtreferenceReg.Text = "";
        //		lookupsource = "AR";
        //		msmrfunc.mrGlobals.crequired = "A";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED ADMISSIONS "+xstring;
        //		msmrfunc.mrGlobals.lookupCriteria = chkCurrntAdmReg.Checked ? "C" : "";
        //	}
        //	else if (btn.Name == "btnreferenceSu") //at SERVICE UPDATE
        //	{
        //		string xstring = chkCurrntAdmSu.Checked ? "[CURRENT ADMISSIONS]" : "[ALL]";
        //		txtreferenceSU.Text = "";
        //		lookupsource = "ASU";
        //		msmrfunc.mrGlobals.crequired = "A";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED ADMISSIONS "+xstring;
        //		msmrfunc.mrGlobals.lookupCriteria = chkCurrntAdmSu.Checked ? "C" : "";
        //	}
        //	else if (btn.Name == "btnreferenceRev") //at reviews
        //	{
        //		string xstring = chkCurrtAdmRev.Checked ? "[CURRENT ADMISSIONS]" : "[ALL]";
        //		txtreferenceReg.Text = "";
        //		lookupsource = "ARV";
        //		msmrfunc.mrGlobals.crequired = "A";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED ADMISSIONS "+xstring;
        //		msmrfunc.mrGlobals.lookupCriteria = chkCurrtAdmRev.Checked ? "C" : "";
        //	}
        //	else if (btn.Name == "btnreferenceCB") //at bed change
        //	{
        //		string xstring = chkCurrtAdmChbed.Checked ? "[CURRENT ADMISSIONS]" : "[ALL]";
        //		txtReference_BC.Text = "";
        //		lookupsource = "ABC";
        //		msmrfunc.mrGlobals.crequired = "A";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED ADMISSIONS " + xstring;
        //		msmrfunc.mrGlobals.lookupCriteria = chkCurrtAdmChbed.Checked ? "C" : "";
        //	}
        //	else if (btn.Name == "btnreferenceD") //at discharge
        //	{
        //		string xstring = chkCurrtAdmD.Checked ? "[CURRENT ADMISSIONS]" : "[ALL]";
        //		txtReference_D.Text = "";
        //		lookupsource = "AD";
        //		msmrfunc.mrGlobals.crequired = "A";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED ADMISSIONS " + xstring;
        //		msmrfunc.mrGlobals.lookupCriteria = chkCurrtAdmD.Checked ? "C" : "";
        //	}
        //	else if (btn.Name == "btnprocedureSI") //at service item def
        //	{
        //	  /*  txtreferenceReg.Text = "";
        //		lookupsource = "ARU";
        //		msmrfunc.mrGlobals.crequired = (chkCurrtAdmRev.Checked) ? "Ar" : "A";
        //		msmrfunc.mrGlobals.frmcaption = "LOOKUP FOR REGISTERED ADMISSIONS";*/
        //	}
        //	frmselcode FrmSelCode = new frmselcode();
        //	FrmSelCode.Closed += new EventHandler(FrmSelCode_Closed);
        //	FrmSelCode.ShowDialog();
        //}


        //void FrmSelCode_Closed(object sender, EventArgs e) // g - groupcode; L - patientno; I - daily attendance
        //{
        //	frmselcode FrmSelcode = sender as frmselcode;
        //	msmrfunc.mrGlobals.lookupCriteria = "";
        //	if (lookupsource == "g") //groupcodee
        //	{
        //		txtgroupcode_Reg.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtPatNoReg.Text = Anycode1 = msmrfunc.mrGlobals.anycode1;
        //		txtgroupcode_Reg.Select();
        //	}
        //	else if (lookupsource == "L") //patientno
        //	{
        //		txtPatNoReg.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtPatNoReg.Select();
        //	}
        //	else if (lookupsource == "SD") //SERVOCE DESC- PROCEDURE
        //	{
        //		combProcedureSu.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		procedure = msmrfunc.mrGlobals.anycode1;
        //		combProcedureSu.Focus();
        //	}
        //	else if (lookupsource == "STK") //stock
        //	{
        //		combStkItemSu.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		combStkItemSu.SelectedValue = Anycode1 = msmrfunc.mrGlobals.anycode1;
        //		combStkItemSu.Focus();
        //	}
        //	else if (lookupsource == "AR") //AT REG
        //	{
        //		txtreferenceReg.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtreferenceReg.Focus();
        //	}
        //	else if (lookupsource == "ASU") //AT SERVICE UPDATE
        //	{
        //		txtreferenceSU.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtreferenceSU.Focus();
        //	}
        //	else if (lookupsource == "ARV") //AT REVIEWS
        //	{
        //		txtreferenceRev.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtreferenceRev.Focus();
        //	}
        //	else if (lookupsource == "ABC") //AT BED CHANGE
        //	{
        //		txtReference_BC.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtReference_BC.Focus();
        //	}
        //	else if (lookupsource == "AD") //AT DISCHARGE
        //	{
        //		txtReference_D.Text = AnyCode = msmrfunc.mrGlobals.anycode;
        //		txtReference_D.Focus();
        //	}
        //	return;
        //}


        //private void btnClose_Click(object sender, EventArgs e)
        //{
        //	this.Close();
        //}


        //void ClearControls_SpaceDef(string xtype,string xpage)
        //{
        //	txtRoom.Text = txtBedNo.Text = txtDesc.Text = "";
        //	dtdatereg.Value = DateTime.Now.Date;
        //	nmrDailyRate.Value = nmrNursingCare.Value = 0m;
        //	listView1.Items.Clear();
        //	if (xtype != "R")
        //		combFacilitySpaceDef.Text = "";
        //}


        //private void initcomboboxes_SpaceDef()
        //{
        //    //get doc
        //    combDocReg.DataSource = dtdocs; //medical staff details - doctors
        //    combDocReg.ValueMember = "Reference";
        //    combDocReg.DisplayMember = "Name";

        //    //diagnosis
        //    combDiagReg.DataSource = dtdiag;
        //    combDiagReg.ValueMember = "Type_code";
        //    combDiagReg.DisplayMember = "Name";

        //    //get clinic
        //    combFacilityreg.DataSource = dtfacility;
        //    combFacilityreg.ValueMember = "Type_code";
        //    combFacilityreg.DisplayMember = "NAME";

        //    combCostCtrReg.DataSource = dtbranch;
        //    combCostCtrReg.ValueMember = "Type_code";
        //    combCostCtrReg.DisplayMember = "NAME";

        //    //at spacedef
        //    combFacilitySpaceDef.DataSource = combfacilityCB.DataSource = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM SERVICECENTRECODES order by name", true);
        //    combFacilitySpaceDef.ValueMember = "Type_code";
        //    combFacilitySpaceDef.DisplayMember = "NAME";

        //    combfacilityCB.ValueMember = "Type_code";
        //    combfacilityCB.DisplayMember = "NAME";

        //    cboDischargeReason.DataSource = dtdischargereason;
        //    cboDischargeReason.ValueMember = "Type_code";
        //    cboDischargeReason.DisplayMember = "NAME";

        //    combDschgDoc.DataSource = dtdocs;
        //    combDschgDoc.ValueMember = "reference";
        //    combDschgDoc.DisplayMember = "NAME";

        //    //at SU
        //    cboFacilitySu.DataSource = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM SERVICECENTRECODES order by name ", true);
        //    cboFacilitySu.ValueMember = "type_code";
        //    cboFacilitySu.DisplayMember = "Name";

        //    combUnitSu.DataSource = Dataaccess.GetAnytable("", "SMS", "select storecode, name from store order by name", true);
        //    combUnitSu.ValueMember = "storecode";
        //    combUnitSu.DisplayMember = "Name";

        //    //tariff details at su
        //    combProcedureSu.DataSource = Dataaccess.GetAnytable("", "MR", "SELECT REFERENCE, NAME FROM TARIFF order by name", true); //selcode.getcombolist("TA", "MR");  //selcode.getsyscodes("GP");
        //    combProcedureSu.ValueMember = "Reference";
        //    combProcedureSu.DisplayMember = "Name";

        //    combprocedureSI.DataSource = dttariff;
        //    combprocedureSI.ValueMember = "Reference";
        //    combprocedureSI.DisplayMember = "Name";

        //    //billheader
        //    combProcessSu.DataSource = Dataaccess.GetAnytable("", "MR", "SELECT REFERENCE, DESCRIPTION FROM dispserv order by description", true);
        //    combProcessSu.ValueMember = "Reference";
        //    combProcessSu.DisplayMember = "Description";

        //    //STOCK
        //    combStkItemSu.DataSource = Dataaccess.GetAnytable("", "SMS", "SELECT DISTINCT NAME, ITEM FROM STOCK order by name", true);
        //    combStkItemSu.ValueMember = "Item";
        //    combStkItemSu.DisplayMember = "Name";
        //}

        void loadserviceItems()
        {
            vm.DISPSERVS = ErpFunc.RsGet<MR_DATA.DISPSERV>("MR_DATA", "SELECT REFERENCE, DESCRIPTION FROM dispserv order by description");

            //string[] arr = new string[3];
            //ListViewItem itm;
            //listViewSI.Items.Clear();

            //for (int i = 0; i<dispserv.Rows.Count; i++)
            //{
            //    arr[0] = dispserv.Rows[i]["description"].ToString();
            //    arr[1] = dispserv.Rows[i]["reference"].ToString();
            //    arr[2] = "OldRec";
            //    itm = new ListViewItem(arr);
            //    listViewSI.Items.Add(itm);
            //}
        }


//string getgrouphead(string xgrouphead, string ghgroupcode, string xtype)
//{
//    string xreturnvalue = "";
//    if (xtype == "P")
//    {
//        patients = patientinfo.GetPatient(xgrouphead, ghgroupcode);
//        if (patients == null)
//        {
//            //msgeventtracker = "g";
//            DialogResult result = MessageBox.Show("Unable to Link Patient's Account Information...Check RESPONSIBLE FOR BILLS", "GroupHead Informaton");
//            xreturnvalue = "Abort";
//        }
//    }
//    else
//    {
//        customers = Customer.GetCustomer(xgrouphead);
//        if (customers == null)
//        {
//            DialogResult result = MessageBox.Show("Unable to Link Patient's Account Information...Check RESPONSIBLE FOR BILLS", "GroupHead Informaton");
//            xreturnvalue = "Abort";
//        }
//    }
//    if (xreturnvalue != "Abort")
//    {
//        xreturnvalue = (xtype == "P" && xgrouphead == patients.patientno) ?
//            "< SELF >" : (xtype == "C") ? customers.Name : patients.name;
//    }
//    return xreturnvalue;
//}


//private void combFacilitySpaceDef_Enter(object sender, EventArgs e)
//{
//    ClearControls_SpaceDef("A", "1");
//}

//private void combFacilitySpaceDef_LostFocus(object sender, EventArgs e)
//{
//    if (string.IsNullOrWhiteSpace(combFacilitySpaceDef.Text))
//        return;
//    displaydetails_SpaceDef(combFacilitySpaceDef.SelectedValue.ToString(), 1);
//}


//private void txtBedNo_LostFocus(object sender, EventArgs e)
//{
//    newrec = true;

//    //check if defintion exist
//    for (int i = 0; i < listView1.Items.Count; i++)
//    {
//        if (listView1.Items[i].SubItems[1].ToString().Trim() == combFacilitySpaceDef.Text.Trim() &&
//            listView1.Items[i].SubItems[2].ToString().Trim() == txtRoom.Text.Trim() &&
//            listView1.Items[i].SubItems[3].ToString().Trim() == txtBedNo.Text.Trim())
//        {
//            newrec = false;
//            recno = i;
//            nmrDailyRate.Value = Convert.ToDecimal(listView1.Items[i].SubItems[4].ToString());
//            lbloccupant_spaceDef.Text = listView1.Items[i].SubItems[5].ToString();
//            txtDesc.Text = listView1.Items[i].SubItems[6].ToString();
//            nmrNursingCare.Value = Convert.ToDecimal(listView1.Items[i].SubItems[7].ToString());
//            nmrDeposit_Reg.Value = Convert.ToDecimal(listView1.Items[i].SubItems[13].ToString());
//            if (!string.IsNullOrWhiteSpace(lbloccupant_spaceDef.Text))
//                btnReleaseBedspace.Enabled = true;
//            else
//                btnReleaseBedspace.Enabled = false;
//            if (listView1.Items[i].SubItems[6].ToString().Trim() != "YES")
//                btnDelete.Enabled = true;
//            break;
//        }
//    }
//    //   btnAdd.Enabled = true;
//}


//void displaydetails_SpaceDef(string facility, int lvc)
//{
//    itemno = 1;
//    string arr5 = "";
//    string[] arr = new string[14];
//    ListViewItem itm;
//    //string ListV = "listView" + lvc;
//    if (lvc == 1)
//        listView1.Items.Clear();
//    else if (lvc == 2)
//        listView2.Items.Clear();
//    else if (lvc == 5)
//        listViewCB.Items.Clear();

//    DataRow row;
//    DataTable dt = ADMSPACE.GetADMSpace(facility);
//    for (int i = 0; i < dt.Rows.Count; i++)
//    {
//        row = dt.Rows[i];
//        arr5 = (!string.IsNullOrWhiteSpace((row["occupant"].ToString()))) ? row["occupant"].ToString() :
//            (Convert.ToBoolean((row["booked"].ToString()))) ? "Booked for " + row["bookeddate"].ToString() : "Available";
//        arr[0] = itemno.ToString();
//        arr[1] = row["name"].ToString();
//        arr[2] = row["room"].ToString();
//        arr[3] = row["bed"].ToString();
//        arr[4] = Convert.ToDecimal(row["rate"]).ToString("N2");
//        arr[5] = arr5;
//        arr[6] = row["description"].ToString();
//        arr[7] = Convert.ToDecimal(row["nursingcare"]).ToString("N2");
//        arr[8] = Convert.ToDateTime(row["trans_date"]).ToString("dd/MM/yyyy");
//        arr[9] = "OLDREC"; // new or old record
//        arr[10] = (Convert.ToBoolean(row["posted"])) ? "YES" : "NO"; //posted or not
//        arr[11] = row["facility"].ToString();
//        arr[12] = row["RECID"].ToString();
//        arr[13] = Convert.ToDecimal(row["adm_deposit"]).ToString("N2");
//        itemno++;
//        itm = new ListViewItem(arr);
//        if (lvc == 1)
//            listView1.Items.Add(itm);
//        else if (lvc == 2)
//            listView2.Items.Add(itm);
//        else
//            listViewCB.Items.Add(itm);
//    }
//}

//private void btnAdd_Click(object sender, EventArgs e) //space definition
//{
//    if (!bissclass.IsPresent(combFacilitySpaceDef, "Facility Name", true) ||
//        !bissclass.IsPresent(txtRoom, "Ward/Room ID", false) ||
//        !bissclass.IsPresent(txtBedNo, "Bed Number", false) ||
//        !bissclass.IsPresent(txtDesc, "Space Description", false))
//        return;

//    if (!newrec)
//    {
//        //listView1.Items[recno].Remove();
//        listView1.Items[recno].SubItems[4].Text = nmrDailyRate.Value.ToString("N2");
//        listView1.Items[recno].SubItems[6].Text = txtDesc.Text;
//        listView1.Items[recno].SubItems[7].Text = nmrNursingCare.Value.ToString("N2");
//        listView1.Items[recno].SubItems[9].Text = "UPDATED";
//    }
//    else
//    {
//        string[] row = { itemno.ToString(), combFacilitySpaceDef.Text, txtRoom.Text, txtBedNo.Text, nmrDailyRate.Value.ToString("N2"), lbloccupant_spaceDef.Text, txtDesc.Text, nmrNursingCare.Value.ToString("N2"), dtdatereg.Value.Date.ToString(), "UPDATED", "NO", combFacilitySpaceDef.SelectedValue.ToString(), "0", nmrDeposit_Reg.Value.ToString("N2") };

//        ListViewItem itm;
//        itm = new ListViewItem(row);
//        listView1.Items.Add(itm);
//    }

//    if (!newrec)
//    {
//        renumberview();
//    }
//    else
//    {
//        itemno++;
//    }
//    //  btnAdd.Enabled = false;
//    btnSubmitSpaceDef.Enabled = true;
//    txtRoom.Focus();
//    return;
//}

//private void dtdatereg_LostFocus(object sender, EventArgs e)
//{
//    if (dtdatereg.Value.Date > DateTime.Now.Date)
//    {
//        DialogResult result = MessageBox.Show("Registration Date Error...", "Date Error!");
//        dtdatereg.Value = DateTime.Now.Date;
//        dtdatereg.Focus();
//        return;
//    }
//}

//void renumberview()
//{
//    for (int i = 0; i < listView1.Items.Count; i++)
//    {
//        listView1.Items[i].SubItems[0].Text = (i + 1).ToString();
//    }
//}

//private void btnSubmitSpaceDef_Click(object sender, EventArgs e)
//{
//    if (listView1.Items.Count == 0)
//        return;
//    btnSubmitSpaceDef.Enabled = false;
//    DialogResult result1 = MessageBox.Show("Confirm to Submit Records...", "Admission Space Details", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
//    if (result1 == DialogResult.No)
//        return;

//    savedetails();
//}

public MR_DATA.REPORTS savedetails()
        {
            string xamt, arr5;
            DateTime xdate;
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            connection.Open();
            //ListViewItem itm;

            foreach(var eachRow in vm.REPORTSS)
            {
                if(eachRow.newrecString != "UPDATED"){
                    continue;
                }

                eachRow.combillcycle = eachRow.combillcycle == null ? "" : eachRow.combillcycle;
               
                //if (itm.SubItems[9].ToString().Trim() != "UPDATED")
                //    continue;

                SqlCommand insertCommand = new SqlCommand();
                if (Convert.ToInt32(eachRow.mreference) > 0) //old rec NOT NEW REQUEST
                {
                    insertCommand.CommandText = "Admspace_update";
                }
                else
                {
                    insertCommand.CommandText = "Admspace_Add";
                }
                //   MessageBox.Show("Here...3 - " + itm.SubItems[0].ToString());
                //FACILITY,NAME,ROOM,BED,DESCRIPTION,RATE,OCCUPANT,TRANS_DATE,POSTED,POST_DATE,BOOKED,BOOKEDDATE

                arr5 = eachRow.combillcycle == "Available" || eachRow.combillcycle.Length > 6 && 
                    eachRow.combillcycle.Substring(0, 6) == "Booked" ? "" : eachRow.combillcycle;

                xdate = Convert.ToDateTime(eachRow.txtclinic);
                insertCommand.Connection = connection;
                insertCommand.CommandType = CommandType.StoredProcedure;

                insertCommand.Parameters.AddWithValue("@facility", eachRow.txtsurname);
                insertCommand.Parameters.AddWithValue("@name", eachRow.combFacility);
                insertCommand.Parameters.AddWithValue("@room", eachRow.txtaddress1);
                insertCommand.Parameters.AddWithValue("@bed", eachRow.cbogender);
                insertCommand.Parameters.AddWithValue("@rate", Convert.ToDecimal(xamt = eachRow.cbotype));
                insertCommand.Parameters.AddWithValue("@occupant", arr5);
                insertCommand.Parameters.AddWithValue("@description", eachRow.edtallergies);
                insertCommand.Parameters.AddWithValue("@nursingcare", Convert.ToDecimal(eachRow.cbotitle));
                insertCommand.Parameters.AddWithValue("@trans_date", xdate);
                insertCommand.Parameters.AddWithValue("@posted", (eachRow.txtbillspayable == "YES") ? true : false);
                if (insertCommand.CommandText == "Admspace_Add")
                {
                    insertCommand.Parameters.AddWithValue("@POST_DATE", DateTime.Now);
                    insertCommand.Parameters.AddWithValue("@BOOKED", false);
                    insertCommand.Parameters.AddWithValue("@BOOKEDDATE", DateTime.Now);
                }
                insertCommand.Parameters.AddWithValue("@adm_deposit", Convert.ToDecimal(eachRow.categ_save));

                insertCommand.ExecuteNonQuery();
            }

            connection.Close();
            //combFacilitySpaceDef.Focus();
            vm.REPORTS.alertMessage = "Submitted Successfully";

            return vm.REPORTS;
        }

        //private void btndelete_Click(object sender, EventArgs e)
        //{
        //    DialogResult result = MessageBox.Show("Confirm to Delete " + txtRoom.Text + txtBedNo.Text + "(" + txtDesc.Text.Trim() + ")...", "Admssion Space Definition Details", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //    if (result == DialogResult.No)
        //        return;
        //    btnDelete.Enabled = false;
        //    ADMSPACE.DeleteAdmSpace(combFacilitySpaceDef.SelectedValue.ToString(), txtRoom.Text, txtBedNo.Text);
        //    combFacilitySpaceDef.Focus();
        //    return;
        //}

        //        //Admisions regisration
        //        private void btnMedNoteReg_Click(object sender, EventArgs e)
        //        {
        //            Button btn = sender as Button;
        //            string caption = btn.Name == "btnMedNoteReg" ? "MEDICAL NOTES - Allergies, Special Instructions, etc." : "SPECIAL INSTRUCTIONS / ADMINISTRATIVE NOTES For this Patient";
        //            string xnote = "";
        //            if (btn.Name == "btnspnotes_Reg")
        //                xnote = bchain.SPNOTES;
        //            else if (btn.Name == "btnMedNoteReg")
        //                xnote = bchain.MEDNOTES;

        //            NOTES notes = new NOTES(caption, "Q", xnote, false);
        //            notes.ShowDialog();
        //            /*  if (btn.Name == "btnspnotes")
        //				  spnotes = string.IsNullOrWhiteSpace(msmrfunc.mrGlobals.rtnstringNotes) ? spnotes : msmrfunc.mrGlobals.rtnstringNotes;*/
        //        }

        
        //private void btnreload_Click(object sender, EventArgs e)
        //{
        //    // DialogResult result;
        //    DataTable dt = msmrfunc.getLinkDetails("", 0, 0m, 0m, "", false, "A", 9, "A", "");

        //    if (dt.Rows.Count > 0)
        //    {
        //        frmGetlinkinfo linkinfo = new frmGetlinkinfo(dt);
        //        linkinfo.ShowDialog();
        //        mcrossref = msmrfunc.mrGlobals.anycode;
        //        Anycode1 = AnyCode = "";
        //        txtreferenceReg.Focus();
        //        return;
        //    }
        //}

        //void LINKDISPLAYDETAILS()
        //{
        //    if (!string.IsNullOrWhiteSpace(mcrossref))
        //    {
        //        mrattend = Mrattend.GetMrattend(mcrossref);
        //        if (mrattend == null)
        //        {
        //            MessageBox.Show("Unable to Link Selected Consultation Reference in Daily Attendance Register... ");
        //            txtreferenceReg.Text = "";
        //            txtreferenceReg.Focus();
        //            return;
        //        }
        //        txtgroupcode_Reg.Text = mrattend.GROUPCODE;
        //        txtPatNoReg.Text = mrattend.PATIENTNO;
        //        dtdateregReg.Value = mrattend.TRANS_DATE;
        //        txtNameReg.Text = mrattend.NAME;
        //        bissclass.displaycombo(combDiagReg, dtdiag, mrattend.DIAGNOSIS, "type_code");
        //        bissclass.displaycombo(combDocReg, dtdocs, mrattend.DOCTOR, "reference");
        //        mgroupcode = mrattend.GROUPCODE;
        //        mpatientno = mrattend.PATIENTNO;
        //        mgrouphead = mrattend.GROUPHEAD;
        //        mghgroupcode = mrattend.GHGROUPCODE;
        //        mgrouphtype = mrattend.GROUPHTYPE;
        //        //get diagnosis
        //        DataTable dt = Dataaccess.GetAnytable("", "MR", "select provisional, final from pmedhdiag where reference = '" + mrattend.REFERENCE + "'", false);
        //        if (dt.Rows.Count > 0)
        //        {
        //            txtPrimaryDiagnosis.Text = dt.Rows[0]["provisional"].ToString() + ", " + dt.Rows[0]["final"].ToString();
        //        }
        //        if (mgrouphead == mpatientno || mgrouphtype == "P")
        //            cashpaying = true;
        //        if (cashpaying)
        //            payok = msmrfunc.checklinkOK("A", mcrossref);
        //        if (cashpaying && mdactive && !payok)
        //        {
        //            MessageBox.Show("No Admission Deposit found for this Referal...", "Admission Deposit Requirement");
        //            txtreferenceReg.Text = "";
        //            // txtreferenceReg.Focus();
        //            btnreload.PerformClick();
        //            return;
        //        }
        //    }
        //}

        //private void txtreferenceReg_Enter(object sender, EventArgs e)
        //{
        //    ClearControls_Reg("P");
        //    lblLimitedUpdate1.Visible = lblLimitedUpdate2.Visible = lblLimitedUpdate3.Visible = lblLimitedUpdate4.Visible = lblLimitedUpdate5.Visible = lblLimitedUpdate6.Visible = false;
        //    cashpaying = false;

        //    if (!string.IsNullOrWhiteSpace(mcrossref))
        //        LINKDISPLAYDETAILS();
        //    if (string.IsNullOrWhiteSpace(AnyCode) &&
        //            new string[] { "3", "A" }.Contains(msection)) //no lookup and msection $ "3A" && 3-NURSES,A-ADMISSIONS
        //    {
        //        //get list of patients sent by doctors
        //        /*  frmlinkinfo FrmLinkinfo = new frmlinkinfo("", 0, 0m, 0m, "", false, msection, 17, "A", "");
        //          FrmLinkinfo.Closed += new EventHandler(FrmLinkinfo_Closed);
        //          FrmLinkinfo.ShowDialog();*/
        //        // btnreload.PerformClick();
        //    }
        //    if (string.IsNullOrWhiteSpace(AnyCode)) //no lookup
        //    {
        //        txtreferenceReg.Text = "";
        //        mlastno = msmrfunc.getcontrol_lastnumber("ADMIT", 8, false, mlastno, false);
        //        txtreferenceReg.Text = mlastno.ToString();
        //        //txtreferenceReg.Focus();
        //    }
        //}


        //void FrmLinkinfo_Closed(object sender, EventArgs e)
        //{
        //    msgeventtracker = "RR";
        //    frmlinkinfo FrmLinkinfo_Closed = sender as frmlinkinfo;
        //    {
        //        mcrossref = msmrfunc.mrGlobals.anycode;
        //        if (!string.IsNullOrWhiteSpace(mcrossref))
        //        {
        //            mrattend = Mrattend.GetMrattend(mcrossref);
        //            if (mrattend == null)
        //            {
        //                DialogResult result = MessageBox.Show("Unable to Link Selected Consultation Reference in Daily Attendance Register... ", msgBoxHandler);
        //                txtreferenceReg.Text = "";
        //                txtreferenceReg.Focus();
        //                return;
        //            }
        //            txtgroupcode_Reg.Text = mrattend.GROUPCODE;
        //            txtPatNoReg.Text = mrattend.PATIENTNO;
        //            dtdateregReg.Value = mrattend.TRANS_DATE;
        //            txtNameReg.Text = mrattend.NAME;
        //           // combDiagReg.Text = bissclass.combodisplayitemCodeName("type_code", mrattend.DIAGNOSIS, dtdiag, "name");
        //           // combDocReg.Text = bissclass.combodisplayitemCodeName("reference", mrattend.DOCTOR, dtdocs, "Name");
        //            bissclass.displaycombo(combDiagReg, dtdiag, mrattend.DIAGNOSIS, "type_code");
        //            bissclass.displaycombo(combDocReg, dtdocs, mrattend.DOCTOR, "reference");
        //            mgroupcode = mrattend.GROUPCODE;
        //            mpatientno = mrattend.PATIENTNO;
        //            mgrouphead = mrattend.GROUPHEAD;
        //            mghgroupcode = mrattend.GHGROUPCODE;
        //            mgrouphtype = mrattend.GROUPHTYPE;
        //            if (mgrouphead == mpatientno || mgrouphtype == "P")
        //                cashpaying = true;
        //            if (cashpaying && mdactive && !payok)
        //            {
        //                DialogResult result1 = MessageBox.Show("No Admission Deposit found for this Referal...", "Admission Deposit Requirement");
        //                txtreferenceReg.Text = "";
        //                txtreferenceReg.Focus();
        //                return;
        //            }
        //        }
        //    }
        //    AnyCode = Anycode1 = "";
        //    txtreferenceReg.Focus();
        //    return;
        // }

        //void ClearControls_Reg(string xtype)
        //{
        //    txtgroupcode_Reg.Text = txtPatNoReg.Text = combFacilityreg.Text = txtNameReg.Text = combRmWdReg.Text =
        //        combBedReg.Text = combDiagReg.Text = combCostCtrReg.Text = txtgroupheadReg.Text = combDocReg.Text = edtprofileReg.Text = "";
        //    nmrFeedingReg.Value = nmrDailyRateReg.Value = nmrPncReg.Value = 0m;
        //    dtdateregReg.Value = DateTime.Now.Date;
        //    this.pictureBox_Reg.Image = null;
        //    listView2.Items.Clear();
        //    if (xtype == "R")
        //        txtreferenceReg.Text = "";
        //}

        
        //private void txtreferenceReg_LostFocus(object sender, EventArgs e)
        //{
        //    if (string.IsNullOrWhiteSpace(txtreferenceReg.Text))
        //        return;
        //    DialogResult result;
        //    txtPatNoReg.Enabled = txtgroupcode_Reg.Enabled = combFacilityreg.Enabled = combRmWdReg.Enabled = combBedReg.Enabled = dtdateregReg.Enabled = true;
        //    if (string.IsNullOrWhiteSpace(AnyCode) || txtreferenceReg.Text.Substring(0, 1) != "A")
        //    {
        //        //try
        //        //{
        //        if (bissclass.IsDigitsOnly(txtreferenceReg.Text.Trim()) && Convert.ToDecimal(this.txtreferenceReg.Text.Trim()) > mlastno)
        //        {
        //            result = MessageBox.Show("Admissions Reference is out of Seguence...");
        //            txtreferenceReg.Text = "";
        //            btnreload.PerformClick();
        //            return;
        //        }
        //        //}
        //        //catch
        //        //{
        //        //    DialogResult result = MessageBox.Show("Reference is not in the right Format...", "ADMISSION REFERENCE", msgBoxHandler);
        //        //    txtreferenceReg.Text = "";
        //        //    return;
        //        //}
        //        if (bissclass.IsDigitsOnly(txtreferenceReg.Text.Trim()))
        //            txtreferenceReg.Text = bissclass.autonumconfig(txtreferenceReg.Text, true, "A", "999999999");
        //    }

        //    newrec = true;
        //    //check if reference exist
        //    //  ClearControls_Reg("P");
        //    AnyCode = Anycode1 = "";
        //    admrecs = Admrecs.GetADMRECS(txtreferenceReg.Text);
        //    if (admrecs == null) //new defintion
        //    {
        //        //  msmrfunc.mrGlobals.waitwindowtext = "NEW ADMISSIONS RECORD ...";
        //        // Display form modelessly
        //        //pleaseWait.Show();
        //        txtgroupcode_Reg.Focus();
        //        txtTimeReg.Text = DateTime.Now.ToShortTimeString();
        //        chk_Reg_AdmNoticeToDoc.Checked = true;
        //    }
        //    else
        //    {
        //        // msmrfunc.mrGlobals.waitwindowtext = "Record Exists";
        //        newrec = false;
        //        // Display form modelessly
        //        // pleaseWait.Show();

        //        string xvalue = getgrouphead(admrecs.GROUPHEAD, admrecs.GHGROUPCODE, admrecs.GROUPHTYPE);
        //        if (xvalue == "Abort")
        //        {
        //            //txtreferenceReg.Focus();
        //            btnreload.PerformClick();
        //            return;
        //        }
        //        txtgroupheadReg.Text = xvalue;

        //        bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);
        //        DisplayDetailsReg();
        //        if (admrecs.DISCHARGE != "")
        //        {
        //            DialogResult result1 = MessageBox.Show("This Patient has been discharged on " + admrecs.DISCHARGE, admrecs.NAME);
        //            txtreferenceReg.Text = "";
        //            //txtreferenceReg.Select();
        //            btnreload.PerformClick();
        //            return;
        //        }

        //        if (admrecs.POSTED || admrecs.ACAMT > 0)
        //        {
        //            result = MessageBox.Show("Record is Posted...LIMITED UPDATE ALLOWED!");
        //            txtPatNoReg.Enabled = txtgroupcode_Reg.Enabled = combFacilityreg.Enabled = combRmWdReg.Enabled = combBedReg.Enabled = dtdateregReg.Enabled = false;
        //            lblLimitedUpdate1.Visible = lblLimitedUpdate2.Visible = lblLimitedUpdate3.Visible = lblLimitedUpdate4.Visible = lblLimitedUpdate5.Visible = lblLimitedUpdate6.Visible = true;
        //        }
        //        else
        //        {
        //            result = MessageBox.Show("Record Exists");
        //            btnDeleteReg.Enabled = mcandelete ? true : false;
        //        }
        //    }
        //    if (newrec && mcanadd)
        //        btnSaveReg.Enabled = true;
        //    else if (!newrec && mcanalter)
        //        btnSaveReg.Enabled = true;

        //    if (newrec)
        //        txtgroupcode_Reg.Focus();
        //    else if (admrecs.POSTED || admrecs.ACAMT > 0)
        //        combDiagReg.Focus();

        //    return;
        //}


        //        void checkOutPatientBillnPay()
        //        {
        //            //15/05/2012 - we check if patient has bills from outpatient consulting for today
        //            DataTable tmpbills = Dataaccess.GetAnytable("", "MR", "select billing.reference, billing.amount, paydetail.reference as Payreference, paydetail.amount as PayAmount from billing LEFT JOIN paydetail on billing.groupcode = paydetail.groupcode and billing.patientno = paydetail.patientno where billing.groupcode = '" + bchain.GROUPCODE + "' and billing.patientno = '" + bchain.PATIENTNO + "' and billing.trans_date = '" + DateTime.Now.ToShortDateString() + "'", false);
        //            if (tmpbills.Rows.Count < 1)
        //            {
        //                tmpbills = Dataaccess.GetAnytable("", "MR", "select INPDISPENSA.reference from INPDISPENSA where INPDISPENSA.groupcode = '" + bchain.GROUPCODE + "' and INPDISPENSA.patientno = '" + bchain.PATIENTNO + "' and INPDISPENSA.trans_date = '" + DateTime.Now.ToShortDateString() + "'", false);
        //                if (tmpbills.Rows.Count < 1)
        //                {
        //                    tmpbills = Dataaccess.GetAnytable("", "MR", "select suspense.reference from suspense where suspense.groupcode = '" + bchain.GROUPCODE + "' and suspense.patientno = '" + bchain.PATIENTNO + "' and suspense.trans_date = '" + DateTime.Now.ToShortDateString() + "'", false);
        //                    if (tmpbills.Rows.Count > 0)
        //                        chkConvertbills.Visible = true;
        //                }
        //            }
        //            if (tmpbills.Rows.Count > 0)
        //            {
        //                chkConvertbills.Visible = true;
        //                DialogResult result = MessageBox.Show("Out-Patient Bills/Payments/Request(s) found for this Patient on this Visit...\r\n CONVERSION ON RECORD SAVE ! ", "OUT-PATIENT to IN-PATIENT BILLS");
        //            }
        //            return;
        //            // combFacilityreg.Focus();
        //        }

        //        private void txtPatNoReg_LostFocus(object sender, EventArgs e)
        //        {
        //            if (string.IsNullOrWhiteSpace(txtPatNoReg.Text))
        //            {
        //                //txtreferenceReg.Focus();
        //                AnyCode = Anycode1 = "";
        //                btnreload.PerformClick();

        //                return;
        //            }
        //            if (string.IsNullOrWhiteSpace(AnyCode))  //no lookup value obtained
        //            {
        //                txtPatNoReg.Text = bissclass.autonumconfig(txtPatNoReg.Text, true, "", "9999999");
        //            }
        //            //check if patientno exists
        //            bchain = billchaindtl.Getbillchain(txtPatNoReg.Text, txtgroupcode_Reg.Text);
        //            if (bchain == null)
        //            {
        //                DialogResult result = MessageBox.Show("Invalid Patient Number... ");
        //                txtPatNoReg.Text = " ";
        //                txtgroupcode_Reg.Focus();
        //                return;
        //            }
        //            else
        //            {
        //                displayPatientPicture(this.pictureBox_Reg, bchain.PICLOCATION);
        //                //we check if this patient is already admitted on different reference and not discharged
        //                //Admrecs tmpadmrecs = Admrecs.GetADMRECS(bchain.GROUPCODE, bchain.PATIENTNO, " ", true);
        //                DataTable tmpadmrecs = Dataaccess.GetAnytable("", "MR", "select reference, adm_date from admrecs where groupcode = '" + bchain.GROUPCODE + "' and patientno = '" + bchain.PATIENTNO + "' and discharge = ''", false);
        //                if (tmpadmrecs.Rows.Count > 0)
        //                {
        //                    DialogResult result = MessageBox.Show("This Patient is already on Admission...CHECK Admission Ref. : " + tmpadmrecs.Rows[0]["REFERENCE"].ToString().Trim());
        //                    txtPatNoReg.Text = "";
        //                    pictureBox_Reg.Image = null;
        //                    txtPatNoReg.Select();
        //                    return;
        //                }
        //                mgrouphtype = bchain.GROUPHTYPE;
        //                //DisplayDetailsReg();
        //                edtprofileReg.Text = patientprofile();
        //                txtgroupheadReg.Text = getgrouphead(bchain.GROUPHEAD, bchain.GHGROUPCODE, bchain.GROUPHTYPE);
        //                if (txtgroupheadReg.Text.Trim() == "Abort")
        //                {
        //                    //txtreferenceReg.Focus();
        //                    btnreload.PerformClick();
        //                    return;
        //                }
        //                txtNameReg.Text = bchain.NAME;
        //                //15/05/2012 - we check if patient has bills from outpatient consulting for today
        //                checkOutPatientBillnPay();
        //                //DataTable dt = Billings.GetBILLINGdetails(bchain.GROUPHEAD,bchain.NAME,bchain.PATIENTNO,"P",DateTime.Now.Date,DateTime.Now.Date);
        //                //if ( dt.Rows.Count > 0 )
        //                //{
        //                //    convertbills = true;
        //                //    DialogResult result = MessageBox.Show("Out-Patient Bills/Payments found for this Patient on this Visit... CONVERSION OF BILLS/PAYMENT WILL BE DONE WHEN U CLICK THE SAVE BUTTOM ! ", "OUT-PATIENT to IN-PATIENT BILLS", msgBoxHandler);
        //                //}
        //                //we get defined specific bed space/feeding tariff, if corporate
        //                if (bchain.GROUPHTYPE == "C")
        //                {
        //                    nmrFeedingReg.Value = nmrDailyRateReg.Value = 0m;

        //                    if (customers.HMO)
        //                    {
        //                        Hmodetail hmodetail = Hmodetail.GetHMODETAIL(bchain.GROUPHEAD, bchain.HMOSERVTYPE);
        //                        if (hmodetail != null)
        //                        {
        //                            nmrFeedingReg.Value = hmodetail.FEEDING;
        //                            nmrDailyRateReg.Value = hmodetail.ACCFEEDING;
        //                        }
        //                    }
        //                    nmrFeedingReg.Value = nmrFeedingReg.Value < 1 ? customers.Feeding : nmrFeedingReg.Value;
        //                    nmrDailyRateReg.Value = nmrDailyRateReg.Value < 1 ? customers.Admissions : nmrDailyRateReg.Value;
        //                }
        //            }
        //            combFacilityreg.Focus();
        //        }

        //        void DisplayDetailsReg()
        //        {
        //            mgrouphtype = admrecs.GROUPHTYPE;
        //            mgrouphead = admrecs.GROUPHEAD;

        //            txtPatNoReg.Text = admrecs.PATIENTNO;
        //            txtgroupcode_Reg.Text = admrecs.GROUPCODE;
        //            txtNameReg.Text = admrecs.NAME;
        //            combFacilityreg.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.FACILITY, dtfacility, "name");
        //            combFacilityreg.SelectedValue = facilitysave = admrecs.FACILITY;
        //            combRmWdReg.Text = roomsave = admrecs.ROOM;
        //            combBedReg.Text = bedsave = admrecs.BED;
        //            dtdateregReg.Value = madmdate = admrecs.ADM_DATE;
        //            txtTimeReg.Text = admrecs.TIME;
        //            /* combDocReg.Text = bissclass.combodisplayitemCodeName("reference", admrecs.DOCTOR, dtdocs, "name");
        //             combDocReg.SelectedValue = admrecs.DOCTOR;
        //             combDiagReg.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.DIAGNOSIS, dtdiag, "name");
        //             combDiagReg.SelectedValue = admrecs.DIAGNOSIS;
        //             combCostCtrReg.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.UNIT, dtbranch, "name");*/
        //            bissclass.displaycombo(combDocReg, dtdocs, admrecs.DOCTOR, "reference");
        //            bissclass.displaycombo(combDiagReg, dtdiag, admrecs.DIAGNOSIS, "type_code");
        //            bissclass.displaycombo(combCostCtrReg, dtbranch, admrecs.UNIT, "type_code");

        //            combCostCtrReg.SelectedValue = admrecs.UNIT;
        //            nmrDailyRateReg.Value = admrecs.RATE;
        //            oldrate = admrecs.RATE;
        //            nmrPncReg.Value = admrecs.DAILYPNC;
        //            nmrFeedingReg.Value = admrecs.DAILYFEEDING;
        //            edtprofileReg.Text = patientprofile();
        //            diagnosis = admrecs.DIAGNOSIS_ALL;
        //            displayPatientPicture(this.pictureBox_Reg, bchain.PICLOCATION);
        //        }

        //        private void dtdateregReg_Leave(object sender, EventArgs e)
        //        {
        //            if (dtdateregReg.Value.Date > DateTime.Now.Date)
        //            {
        //                DialogResult result = MessageBox.Show("Date Error...");
        //                dtdateregReg.Value = DateTime.Now.Date;
        //                dtdateregReg.Focus();
        //                return;
        //            }
        //        }

        
        //        private void combFacilityreg_Leave(object sender, EventArgs e)
        //        {
        //            if (string.IsNullOrWhiteSpace(combFacilityreg.Text))
        //            {
        //                return;
        //            }

        //            displaydetails_SpaceDef(combFacilityreg.SelectedValue.ToString(), 2);
        //            //store available items to room/bed
        //            combRmWdReg.Items.Clear();
        //            combBedReg.Items.Clear();
        //            for (int i = 0; i < listView2.Items.Count; i++)
        //            {
        //                //arr[2] = dt.Rows[i]["room"].ToString();
        //                //arr[3] = dt.Rows[i]["bed"].ToString();
        //                //arr[4] = dt.Rows[i]["rate"].ToString()
        //                if (listView2.Items[i].SubItems[5].ToString() == "Available")
        //                {
        //                    combRmWdReg.Items.Add(listView2.Items[i].SubItems[2].ToString());
        //                    combBedReg.Items.Add(listView2.Items[i].SubItems[3].ToString());
        //                }
        //            }
        //        }

        
        //        private void combBedReg_Leave(object sender, EventArgs e)
        //        {
        //            DialogResult result;
        //            bool xfoundit = false;
        //            if (!string.IsNullOrWhiteSpace(combBedReg.Text))
        //            {
        //                for (int i = 0; i < listView2.Items.Count; i++)
        //                {
        //                    if (listView2.Items[i].SubItems[2].ToString().Trim() == combRmWdReg.Text.Trim() &&
        //                            listView2.Items[i].SubItems[3].ToString().Trim() == combBedReg.Text.Trim())
        //                    {
        //                        if (listView2.Items[i].SubItems[5].ToString().Trim() != "Available" &&
        //                            listView2.Items[i].SubItems[5].ToString().Trim() != txtNameReg.Text.Trim())
        //                        {
        //                            result = MessageBox.Show("Space is occupied by ->" + listView2.Items[i].SubItems[5].ToString().Trim(), combFacilityreg.Text);
        //                            combBedReg.Focus();
        //                            return;
        //                        }
        //                        else if (listView2.Items[i].SubItems[5].ToString().Trim() == "Booked" &&
        //                            Convert.ToDateTime(listView2.Items[i].SubItems[5]) < DateTime.Now.Date ||
        //                            listView2.Items[i].SubItems[5].ToString().Trim() == "Available")
        //                        {
        //                            xfoundit = true;
        //                            if (bchain.GROUPHTYPE == "P" || nmrDailyRateReg.Value < 1)
        //                            {
        //                                nmrDailyRateReg.Value = Convert.ToDecimal(listView2.Items[i].SubItems[4].ToString());
        //                            }
        //                            nmrPncReg.Value = Convert.ToDecimal(listView2.Items[i].SubItems[7].ToString());
        //                        }
        //                    }
        //                }
        //                if (!xfoundit)
        //                {
        //                    result = MessageBox.Show("Invalid Bed Space Selections");
        //                    combBedReg.Text = "";
        //                    combBedReg.Focus();
        //                    return;
        //                }
        //                btnSaveReg.Enabled = true;
        //            }
        //        }

        
        //        private void txtTimeReg_Enter(object sender, EventArgs e)
        //        {
        //            txtTimeReg.Text = string.IsNullOrWhiteSpace(txtTimeReg.Text) ? DateTime.Now.ToShortTimeString() : txtTimeReg.Text;
        //        }

        
        public MR_DATA.REPORTS btnSaveReg_Click()
        {
            //msmrfunc.mrGlobals.iserror = false;
            admrecs = GetADMRECS(vm.REPORTS.txtreference);

            if(admrecs != null)
            {
                bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);
                if (!newrec && (admrecs.POSTED || admrecs.ACAMT > 0))
                {
                    LimitedUpdate();
                    vm.REPORTS.alertMessage = "Limited Update Completed...";
                    return vm.REPORTS;
                }
            }

            diagnosis = vm.REPORTS.edtallergies;
            vm.REPORTS.dtregistered = Convert.ToDateTime(vm.REPORTS.txtstaffno);
            newrec = vm.REPORTS.newrec;
            mlastno = vm.REPORTS.mlastno;
            mpatientno = vm.REPORTS.mpatientno;
            mgroupcode = vm.REPORTS.mgroupcode;
            mcrossref = vm.REPORTS.txtworkphone;


            //DialogResult result;
            //if (!bissclass.IsPresent(txtreferenceReg, "Admission Reference", false) ||
            //    !bissclass.IsPresent(txtPatNoReg, "Patient Number", false) ||
            //    !bissclass.IsPresent(txtNameReg, "Patients Name", false) ||
            //    !bissclass.IsPresent(txtgroupheadReg, "Bills Payable By", false) ||
            //    !bissclass.IsPresent(combFacilityreg, "Admission Facility", true) ||
            //    !bissclass.IsPresent(combRmWdReg, "Ward/Rom ID", true) ||
            //    !bissclass.IsPresent(combBedReg, "Ward/Rom ID", true) ||
            //    !bissclass.IsPresent(combDocReg, "Admitting Doc", true))
            //    return;

            //if (string.IsNullOrWhiteSpace(combDiagReg.Text) && string.IsNullOrWhiteSpace(diagnosis))
            //{
            //    result = MessageBox.Show("Disgnosis for this admission must be specified...");
            //    return;
            //}

            //if (txtreferenceReg.Text.Substring(0, 1) != "A" || txtreferenceReg.Text.Length < 9)
            //{
            //    result = MessageBox.Show("Admission Reference is not in right format...");
            //    return;
            //}

            vm.REPORTS.cmbsave = false;

            //result = MessageBox.Show("Confirm to Submit Records...", "Admission Registration Details
            //", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
            //if (result == DialogResult.No)
            //    return;
            //if (!newrec && (admrecs.POSTED || admrecs.ACAMT > 0))
            //{
            //    LimitedUpdate();
            //    result = MessageBox.Show("Limited Update Completed...", "Admission Records");
            //}
            //else
            //{

            submitRegistrationRecord();
            vm.REPORTS.txtreference = "";

            //   }
            vm.REPORTS.ActRslt = "Record submitted Successfully...";
            //AnyCode = Anycode1 = "";
            vm.REPORTS.txtreference = "";
            vm.REPORTS.chkADVCorporate = false; //chk_Reg_AdmNoticeToDoc.Checked
            //txtreferenceReg.Focus();
            //btnreload.PerformClick();

            return vm.REPORTS;
        }

        Admrecs GetADMRECS(string xreference)
        {
            DateTime dtmin_date = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
            //Admrecs admrecs = new Admrecs();

            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = (!string.IsNullOrWhiteSpace(xreference)) ? "ADMRECS_GetByRef" : "ADMRECS_Get"; //"spGetPatient";
            selectCommand.Connection = connection;
            selectCommand.CommandType = CommandType.StoredProcedure;

            selectCommand.Parameters.AddWithValue("@Reference", xreference);

            try
            {
                connection.Open();
                SqlDataReader reader = (!string.IsNullOrWhiteSpace(xreference)) ? selectCommand.ExecuteReader(CommandBehavior.SingleRow) :
                    selectCommand.ExecuteReader();

                if (reader.Read())
                {
                    admrecs.REFERENCE = reader["reference"].ToString();
                    admrecs.PATIENTNO = reader["patientno"].ToString();
                    admrecs.NAME = reader["name"].ToString();
                    admrecs.FACILITY = reader["facility"].ToString();
                    admrecs.UNIT = reader["unit"].ToString();
                    admrecs.ROOM = reader["room"].ToString();
                    admrecs.BED = reader["bed"].ToString();
                    admrecs.RATE = (Decimal)reader["rate"];
                    admrecs.ADM_DATE = (DateTime)reader["adm_date"];
                    admrecs.TIME = reader["time"].ToString();
                    admrecs.DOCTOR = reader["doctor"].ToString();
                    admrecs.DIAGNOSIS = reader["diagnosis"].ToString();
                    admrecs.DISCHARGE = reader["discharge"].ToString();
                    admrecs.DISCH_TIME = reader["disch_time"].ToString();
                    admrecs.DISCH_DOCT = reader["disch_doct"].ToString();
                    admrecs.BILLED = (bool)reader["billed"];
                    admrecs.DATE_BILLE = (DateTime)reader["date_bille"];
                    admrecs.REMARKS = reader["remarks"].ToString();
                    admrecs.REASON = reader["reason"].ToString();
                    admrecs.POSTED = (bool)reader["posted"];
                    admrecs.POST_DATE = (DateTime)reader["post_date"];
                    admrecs.GROUPHEAD = reader["grouphead"].ToString();
                    admrecs.GROUPHTYPE = reader["grouphtype"].ToString();
                    admrecs.GROUPCODE = reader["groupcode"].ToString();
                    admrecs.ACAMT = (Decimal)reader["acamt"];
                    admrecs.GHGROUPCODE = reader["GHGROUPCODE"].ToString();
                    admrecs.DAILYFEEDING = (Decimal)reader["dailyfeeding"];
                    admrecs.DAILYPNC = (Decimal)reader["dailypnc"];
                    admrecs.PAYMENTS = (Decimal)reader["payments"];
                    admrecs.OPERATOR = reader["operator"].ToString();
                    admrecs.DTIME = (DateTime)reader["dtime"];
                    admrecs.DIAGNOSIS_ALL = reader["DIAGNOSIS_ALL"].ToString();
                }
                else
                {
                    connection.Close();
                    return null;
                }
                reader.Close();
            }
            catch (Exception ex)
            {
                //throw ex;
                vm.REPORTS.cbotype = "" + ex; //"Get In-Patient Details ", MessageBoxButtons.OK,
                connection.Close();
                return null;
            }
            finally
            {
                connection.Close();
            }

            return admrecs;
        }

        MedHist GetMEDHIST(string GroupCodeID, string PatientID, string xreference, bool ByReference, bool ByDate, DateTime xtrans_date, string xsortorder)
        {
            MedHist medhist = new MedHist();
            DateTime dtmin_date = msmrfunc.mrGlobals.mta_start;
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand selectCommand = new SqlCommand();
            selectCommand.CommandText = (ByReference) ? "MEDHIST_Get" : (ByDate) ? "MEDHIST_GetByDate" : "MEDHIST_GetByPatient";
            selectCommand.Connection = connection;
            selectCommand.CommandType = CommandType.StoredProcedure;

            if (ByReference)
                selectCommand.Parameters.AddWithValue("@Reference", xreference);
            else if (ByDate)
            {
                selectCommand.Parameters.AddWithValue("@Groupcode", GroupCodeID);
                selectCommand.Parameters.AddWithValue("@Patientno", PatientID);
                selectCommand.Parameters.AddWithValue("@trans_date", xtrans_date);
            }
            else
            {
                selectCommand.Parameters.AddWithValue("@GroupCode", GroupCodeID);
                selectCommand.Parameters.AddWithValue("@Patientno", PatientID);
            }
            selectCommand.Parameters.AddWithValue("@sortorder", xsortorder);
            try
            {
                connection.Open();
                SqlDataReader reader = (ByReference || ByDate) ? selectCommand.ExecuteReader(CommandBehavior.SingleRow) :
                                        selectCommand.ExecuteReader();

                if (reader.Read())
                {
                    medhist.REFERENCE = reader["reference"].ToString();
                    medhist.PATIENTNO = reader["patientno"].ToString();
                    medhist.NAME = reader["name"].ToString();
                    medhist.TRANS_DATE = (DateTime)reader["trans_date"];
                    medhist.COMMENTS = reader["comments"].ToString();
                    medhist.POSTED = (reader["posted"] == DBNull.Value) ? false : (bool)reader["posted"];
                    medhist.POST_DATE = (reader["posted"] == DBNull.Value) ? dtmin_date : (DateTime)reader["post_date"];
                    medhist.BILLED = (reader["billed"] == DBNull.Value) ? "" : reader["billed"].ToString();
                    medhist.BILLREF = (reader["billref"] == DBNull.Value) ? "" : reader["billref"].ToString();
                    medhist.AMOUNT = (reader["posted"] == DBNull.Value) ? 0m : (Decimal)reader["amount"];
                    medhist.GROUPCODE = reader["groupcode"] == null ? "" : reader["groupcode"].ToString();
                    medhist.WEIGHT = (reader["weight"] == DBNull.Value) ? "" : reader["weight"].ToString();
                    medhist.HEIGHT = (reader["height"] == DBNull.Value) ? "" : reader["height"].ToString();
                    medhist.BP_S = (reader["bp_s"] == DBNull.Value) ? "" : reader["bp_s"].ToString();
                    medhist.BP_STN = (reader["bp_stn"] == DBNull.Value) ? "" : reader["bp_stn"].ToString();
                    medhist.TEMP = (reader["temp"] == DBNull.Value) ? "" : reader["temp"].ToString();
                    medhist.PULSE = (reader["pulse"] == DBNull.Value) ? "" : reader["pulse"].ToString();
                    medhist.RESPIRATIO = (reader["respiratio"] == DBNull.Value) ? "" : reader["respiratio"].ToString();
                    medhist.OTHERS = (reader["others"] == DBNull.Value) ? "" : reader["others"].ToString();
                    medhist.DOCTOR = (reader["doctor"] == DBNull.Value) ? "" : reader["doctor"].ToString();
                    medhist.PROTECTED = (reader["protected"] == DBNull.Value) ? 0m : (Decimal)reader["protected"];
                    medhist.ENCHRYPTED = (reader["ENCHRYPTED"] == DBNull.Value) ? false : (bool)reader["ENCHRYPTED"];
                    medhist.GHGROUPCODE = (reader["ghgroupcode"] == DBNull.Value) ? "" : reader["ghgroupcode"].ToString();
                    medhist.GROUPHEAD = (reader["grouphead"] == DBNull.Value) ? "" : reader["grouphead"].ToString();
                    medhist.OPERATOR = (reader["operator"] == DBNull.Value) ? "" : reader["operator"].ToString();
                    medhist.DTIME = (reader["dtime"] == DBNull.Value) ? dtmin_date : (DateTime)reader["dtime"];
                }
                else
                {
                    connection.Close();
                    return null;

                }
                reader.Close();
            }
            catch (Exception ex)
            {
                //throw ex;
                vm.REPORTS.cbotype = "" + ex;
                connection.Close();
                return null;
            }
            finally
            {
                connection.Close();
            }

            return medhist;
        }

        bool Writemrb21Details(string groupcode, string patientno, DateTime xtrans_date, string xname, string facility, string sender, string notes, string reference, string sendsection, string tosection, string xoperator, string xdoctor, string xttype)
        {
            // DateTime dtmin_date = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue;
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand insertCommand = new SqlCommand();
            insertCommand.CommandText = "MRB21_Add";
            insertCommand.Connection = connection;
            insertCommand.CommandType = CommandType.StoredProcedure;

            insertCommand.Parameters.AddWithValue("@groupcode", groupcode);
            insertCommand.Parameters.AddWithValue("@patientno", patientno);
            insertCommand.Parameters.AddWithValue("@name", xname);
            insertCommand.Parameters.AddWithValue("@sender", sender);
            insertCommand.Parameters.AddWithValue("@trans_date", xtrans_date);
            insertCommand.Parameters.AddWithValue("@facility", facility);
            insertCommand.Parameters.AddWithValue("@notes", notes);
            insertCommand.Parameters.AddWithValue("@received", "");
            insertCommand.Parameters.AddWithValue("@operator", xoperator);
            insertCommand.Parameters.AddWithValue("@reference", reference);
            insertCommand.Parameters.AddWithValue("@sendsection", sendsection);
            insertCommand.Parameters.AddWithValue("@doctor", xdoctor);
            insertCommand.Parameters.AddWithValue("@posted", false);
            insertCommand.Parameters.AddWithValue("@tosection", tosection);
            insertCommand.Parameters.AddWithValue("@ttype", xttype);

            try
            {
                connection.Open();
                insertCommand.ExecuteNonQuery();

            }
            catch (SqlException ex)
            {
                // throw ex;
                vm.REPORTS.cbotype = "" + ex;
                    //MessageBoxButtons.OK,
                    //MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                return false;
            }
            finally
            {
                connection.Close();
            }
            return true;
        }

        void submitRegistrationRecord()
        {
            decimal XX = Convert.ToDecimal(vm.REPORTS.txtreference.Substring(1, 8));
            dtmin_date = DateTime.Now;

            if (newrec && Convert.ToDecimal(vm.REPORTS.txtreference.Substring(1, 8)) >= mlastno) //update ref. counter and get a new value, if necessary.
            {
                decimal lastnosave = mlastno;
                mlastno = msmrfunc.getcontrol_lastnumber("ADMIT", 8, true, mlastno, false);
                if (mlastno != lastnosave)
                    vm.REPORTS.txtreference = bissclass.autonumconfig(mlastno.ToString(), true, "A", "999999999");
            }

            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand insertCommand = new SqlCommand();
            insertCommand.CommandText = (newrec) ? "Admrecs_Add" : "Admrecs_Update";
            insertCommand.Connection = connection;
            insertCommand.CommandType = CommandType.StoredProcedure;

            insertCommand.Parameters.AddWithValue("@reference", vm.REPORTS.txtreference);
            insertCommand.Parameters.AddWithValue("@patientno", vm.REPORTS.txtpatientno);
            insertCommand.Parameters.AddWithValue("@name", vm.REPORTS.TXTPATIENTNAME);
            insertCommand.Parameters.AddWithValue("@facility", vm.REPORTS.combFacility);
            insertCommand.Parameters.AddWithValue("@unit", vm.REPORTS.txtbranch == null ? "" : vm.REPORTS.txtbranch);
            insertCommand.Parameters.AddWithValue("@room", vm.REPORTS.txtRoom);
            insertCommand.Parameters.AddWithValue("@bed", vm.REPORTS.txtBed);
            insertCommand.Parameters.AddWithValue("@rate", vm.REPORTS.nmrcurdebit);
            insertCommand.Parameters.AddWithValue("@adm_date", vm.REPORTS.dtregistered.Date);
            insertCommand.Parameters.AddWithValue("@time", vm.REPORTS.cbotitle);
            insertCommand.Parameters.AddWithValue("@doctor", newrec ? vm.REPORTS.doctor : admrecs.DOCTOR);
            insertCommand.Parameters.AddWithValue("@diagnosis", vm.REPORTS.diagnosis);
            insertCommand.Parameters.AddWithValue("@discharge", "");
            insertCommand.Parameters.AddWithValue("@disch_time", "");
            insertCommand.Parameters.AddWithValue("@disch_doct", "");
            insertCommand.Parameters.AddWithValue("@billed", false);
            insertCommand.Parameters.AddWithValue("@date_bille", dtmin_date);
            insertCommand.Parameters.AddWithValue("@remarks", "");
            insertCommand.Parameters.AddWithValue("@reason", "");
            insertCommand.Parameters.AddWithValue("@posted", false);
            insertCommand.Parameters.AddWithValue("@post_date", dtmin_date);
            insertCommand.Parameters.AddWithValue("@grouphead", bchain.GROUPHEAD);
            insertCommand.Parameters.AddWithValue("@grouphtype", bchain.GROUPHTYPE);
            insertCommand.Parameters.AddWithValue("@groupcode", vm.REPORTS.txtgroupcode);
            insertCommand.Parameters.AddWithValue("@acamt", (newrec) ? 0 : admrecs.ACAMT);
            insertCommand.Parameters.AddWithValue("@GHGROUPCODE", bchain.GHGROUPCODE);
            insertCommand.Parameters.AddWithValue("@dailyfeeding", vm.REPORTS.txtdiscount);
            insertCommand.Parameters.AddWithValue("@dailypnc", vm.REPORTS.nmrbalance);
            insertCommand.Parameters.AddWithValue("@payments", (newrec) ? 0 : admrecs.PAYMENTS);
            insertCommand.Parameters.AddWithValue("@operator", woperator);
            insertCommand.Parameters.AddWithValue("@dtime", DateTime.Now);
            insertCommand.Parameters.AddWithValue("@diagnosis_all", newrec ? vm.REPORTS.cboTribe + " " + diagnosis : admrecs.DIAGNOSIS_ALL);

            try
            {
                connection.Open();
                insertCommand.ExecuteNonQuery();
            }
            catch (SqlException ex)
            {
                vm.REPORTS.alertMessage = "Admissions Registration " + ex;
                    //"Admissions Details", MessageBoxButtons.OK,
                    //MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                return;
            }
            finally
            {
                connection.Close();
            }

            if (newrec)
            {
                ADMSPACE.UpdateAdmOccupant(vm.REPORTS.combFacility, vm.REPORTS.TXTPATIENTNAME, vm.REPORTS.txtRoom,
                    vm.REPORTS.txtBed, DateTime.Now.Date);

                string xcomments = "==> Admission - @" + DateTime.Now.ToShortTimeString() + " Date Admitted : " +
                    vm.REPORTS.dtregistered + " : Diag : " + vm.REPORTS.cboTribe + " " + diagnosis + "\r\n" +
                    "  Facility : " + vm.REPORTS.combFacility + ":  " + vm.REPORTS.txtRoom + "; Bed : " + 
                    vm.REPORTS.txtBed + "\r\n Reference : " + vm.REPORTS.txtreference;

                updatemedhist(xcomments, vm.REPORTS.dtregistered.Date, bchain, vm.REPORTS.txtreference, vm.REPORTS.doctor);
                
                //GENERATE ACCOMMODATION CHARGE FOR TODAY
                string xmastpro, xdesc; xmastpro = xdesc = "";
                foreach (DataRow row in dispserv.Rows)
                {
                    if (row["Description"].ToString().Contains("ACCOMMODATION"))
                    {
                        xmastpro = row["reference"].ToString();
                        xdesc = row["description"].ToString();
                        break;
                    }
                }

                ADMDETAI.writeAdmdetails(true, vm.REPORTS.txtreference, vm.REPORTS.dtregistered.Date, vm.REPORTS.cbotitle, 
                    acc_code, xmastpro, "", xdesc, vm.REPORTS.txtbranch == null ? "" : vm.REPORTS.txtbranch, 1m, vm.REPORTS.nmrcurdebit, 
                    false, DateTime.Now, woperator, DateTime.Now, mgroupcode, mpatientno, vm.REPORTS.doctor, vm.REPORTS.combFacility, 0, "");

                Admrecs.UpdateAdmrecAmounts(vm.REPORTS.txtreference, vm.REPORTS.nmrcurdebit, 0m);

                if (!string.IsNullOrWhiteSpace(mcrossref)) //update link received
                {
                    /* string updatestring = "update link set daterec = '" + DateTime.Now.Date + "', timerec = '" + DateTime.Now.ToShortTimeString() + "' where reference = '" + mcrossref + "' and tosection = 'A' ";
                     bissclass.UpdateRecords(updatestring, "MR");*/
                    LINK.ClearLink(mcrossref, "A", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"), DateTime.Now.ToLongTimeString());
                    
                    //admission notice to billing
                    LINK.WriteLINK(0, mrattend.GROUPCODE, mrattend.PATIENTNO, mrattend.NAME, "7", mcrossref, 0, 0, 
                        vm.REPORTS.combFacility, false, vm.REPORTS.doctor, false, 0, "", msection, woperator);

                    if (vm.REPORTS.chkSortByOperator)
                    {
                        vm.REPORTS.chkCurrtAdmRev = true;

                        //frmConvertBills convertbills = new frmConvertBills(mrattend.REFERENCE, vm.REPORTS.txtreference,
                        //    bchain.GROUPCODE, bchain.PATIENTNO, bchain.NAME, vm.REPORTS.doctor, vm.REPORTS.dtregistered.Date, woperator);

                        //convertbills.Show();
                    }
                }

                //alert to Cashier and Billing
                string xnotes = "ADMISSIONS NOTIFICATION @ " + vm.REPORTS.combFacility + ":" + vm.REPORTS.txtRoom + 
                    ":" + vm.REPORTS.txtBed + ":" + vm.REPORTS.txtreference;

                for (int i = 0; i < 3; i++)
                {
                    Writemrb21Details(bchain.GROUPCODE, bchain.PATIENTNO, DateTime.Now, bchain.NAME, vm.REPORTS.combFacility, 
                        woperator, xnotes, vm.REPORTS.txtreference, msection, i == 0 ? "2" : i == 1 ? "7" : "4", woperator, vm.REPORTS.doctor, "I");
                }

                //alert doc 30.10.2019 - shabach
                //if (chk_Reg_AdmNoticeToDoc.Checked)
                //{
                //   // MRB21a.WriteAlertDetails(bchain.NAME, woperator, DateTime.Now, xnotes, "", msection, false, "4", 0m, 0m, false);
                //    MRB21.Writemrb21Details(bchain.GROUPCODE, bchain.PATIENTNO, DateTime.Now, bchain.NAME, combFacilityreg.Text.Trim(), woperator, xnotes, txtreferenceReg.Text, msection, i == 0 ? "2" : "7", woperator, combDocReg.Text, "I");

                //}
            }

            if (!newrec && vm.REPORTS.txtBed != admrecs.BED.Trim() || !newrec && vm.REPORTS.combFacility != 
                admrecs.FACILITY.Trim() || !newrec && vm.REPORTS.txtRoom != admrecs.ROOM.Trim())
                ADMSPACE.UpdateAdmOccupant(facilitysave, "", roomsave, admrecs.BED, vm.REPORTS.dtregistered.Date);
        }

        void LimitedUpdate()
        {
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand insertCommand = new SqlCommand();
            insertCommand.CommandText = "Admrecs_LimitedUpdate";
            insertCommand.Connection = connection;
            insertCommand.CommandType = CommandType.StoredProcedure;
            
            insertCommand.Parameters.AddWithValue("@reference", vm.REPORTS.txtreference);
            insertCommand.Parameters.AddWithValue("@unit", vm.REPORTS.txtbranch);
            insertCommand.Parameters.AddWithValue("@doctor", vm.REPORTS.doctor == null ? "" : vm.REPORTS.doctor);
            insertCommand.Parameters.AddWithValue("@diagnosis", vm.REPORTS.diagnosis);
            insertCommand.Parameters.AddWithValue("@dailyfeeding", vm.REPORTS.txtdiscount);
            insertCommand.Parameters.AddWithValue("@dailypnc", vm.REPORTS.nmrbalance);
            insertCommand.Parameters.AddWithValue("@operator", woperator);
            insertCommand.Parameters.AddWithValue("@dtime", DateTime.Now);
            insertCommand.Parameters.AddWithValue("@diagnosis_all", diagnosis == "" ? vm.REPORTS.cboTribe : diagnosis); //admrecs.DIAGNOSIS_ALL.Trim() + "; " + combDiagReg.Text.Trim() );

            try
            {
                connection.Open();
                insertCommand.ExecuteNonQuery();
            }
            catch (SqlException ex)
            {
                vm.REPORTS.alertMessage = "Admissions Limited Update " + ex;
                    //"Admissions Details", MessageBoxButtons.OK,
                    //MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                return;
            }
            finally
            {
                connection.Close();
            }
        }

        void updatemedhist(string notes, DateTime transdate, billchaindtl billchain, string reference, string xdoc)
        {
            MedHist medhist = GetMEDHIST(billchain.GROUPCODE, billchain.PATIENTNO, "", false, true, transdate, "DESC");
            bool newhist = (medhist == null) ? true : false;

            if (!newhist)
            {
                notes = medhist.COMMENTS.Trim() + "\r\n" + notes.Trim();
            }

            MedHist.updatemedhistcomments(billchain.GROUPCODE, billchain.PATIENTNO, transdate, notes, newhist, 
                reference, billchain.NAME, billchain.GHGROUPCODE, billchain.GROUPHEAD, xdoc);
        }



        //        //service update
        //        private void txtreferenceSU_Click(object sender, EventArgs e)
        //        {
        //            txtreferenceSU.Focus();
        //        }

        //        private void txtreferenceSU_Enter(object sender, EventArgs e)
        //        {
        //            ClearControls_SU();
        //            newrec = false;
        //        }

        //        void ClearControls_SU()
        //        {
        //            txtgroupcode_SU.Text = txtPatNoSu.Text = lblfaciitySu.Text = txtNameSu.Text = txtWardRmSu.Text =
        //                txtbedSU.Text = txtDiagSu.Text = txtgroupheadSu.Text = combStkItemSu.Text = combMeasureSu.Text =
        //            combUnitSu.Text = txtServeTimeSu.Text = combProcessSu.Text = combProcedureSu.Text = txtadm_dateSu.Text = txtdischarge_dateSu.Text = lblLenghtofStay_Su.Text = "";
        //            nmrAmountSu.Value = nmrQtySu.Value = 0m;
        //            dttrans_dateSu.Value = DateTime.Now.Date;
        //            this.pictureBox_SU.Image = null;
        //            listView3.Items.Clear();
        //        }


        //        private void txtreferenceSU_LostFocus(object sender, EventArgs e)
        //        {
        //            if (string.IsNullOrWhiteSpace(txtreferenceSU.Text))
        //                return;
        //            if (string.IsNullOrWhiteSpace(AnyCode) && txtreferenceSU.Text.Substring(0, 1) != "A")
        //            {
        //                /* MessageBox.Show("Reference is not in the right Format...", "ADMISSION REFERENCE", msgBoxHandler);
        //                 txtreferenceSU.Text = "";
        //                 txtreferenceSU.Focus();
        //                 return; */
        //                if (bissclass.IsDigitsOnly(txtreferenceSU.Text.Trim()))
        //                    this.txtreferenceSU.Text = bissclass.autonumconfig(this.txtreferenceSU.Text, true, "A", "999999999");
        //            }
        //            //check if reference exist
        //            AnyCode = Anycode1 = "";
        //            admrecs = Admrecs.GetADMRECS(txtreferenceSU.Text);
        //            if (admrecs == null) //new defintion
        //            {
        //                DialogResult result = MessageBox.Show("Invalid Admission Reference...", "ADMISSION DETAILS");
        //                txtreferenceSU.Text = "";
        //                txtreferenceSU.Select();
        //                return;
        //            }
        //            else
        //            {
        //                mgrouphtype = admrecs.GROUPHTYPE;
        //                txtPatNoSu.Text = admrecs.PATIENTNO;
        //                txtgroupcode_SU.Text = admrecs.GROUPCODE;
        //                lblfaciitySu.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.FACILITY, dtfacility, "name"); // admrecs.FACILITY;
        //                txtNameSu.Text = admrecs.NAME;
        //                txtWardRmSu.Text = admrecs.ROOM;
        //                txtbedSU.Text = admrecs.BED;
        //                txtDiagSu.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.DIAGNOSIS, dtdiag, "name");
        //                if (txtDiagSu.Text.Trim() != admrecs.DIAGNOSIS_ALL && !string.IsNullOrWhiteSpace(admrecs.DIAGNOSIS_ALL))
        //                    txtDiagSu.Text = admrecs.DIAGNOSIS_ALL;
        //                txtadm_dateSu.Text = admrecs.ADM_DATE.ToShortDateString();
        //                txtdischarge_dateSu.Text = admrecs.DISCHARGE;
        //                DateTime xdischarge = string.IsNullOrWhiteSpace(admrecs.DISCHARGE) ? DateTime.Now.Date : Convert.ToDateTime(admrecs.DISCHARGE);
        //                lblLenghtofStay_Su.Text = (xdischarge - admrecs.ADM_DATE).Days.ToString() + " day(s)";
        //                mgrouphead = admrecs.GROUPHEAD;
        //                bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);
        //                txtAddrSu.Text = bchain.RESIDENCE;
        //                edtprofileSu.Text = patientprofile();
        //                txtgroupheadSu.Text = getgrouphead(bchain.GROUPHEAD, bchain.GHGROUPCODE, bchain.GROUPHTYPE);
        //                if (txtgroupheadSu.Text.Trim() == "Abort")
        //                {
        //                    txtreferenceSU.Focus();
        //                    return;
        //                }
        //                displayPatientPicture(this.pictureBox_SU, bchain.PICLOCATION);
        //                displayserivesSU();
        //                mreference = txtreferenceSU.Text;
        //                if (admrecs.DISCHARGE != "")
        //                {
        //                    DialogResult result = MessageBox.Show("This Patient has been discharged on " + admrecs.DISCHARGE, admrecs.NAME);
        //                }
        //                else
        //                    btnTreatmtCht.Enabled = true;
        //                getAccummulatedCharge(admrecs.REFERENCE, admrecs.ACAMT);
        //                // if (nmrCurrentTotalSU.Value != admrecs.ACAMT)
        //                //     Admrecs.UpdateAdmrecAmounts(admrecs.REFERENCE, nmrCurrentTotalSU.Value, 0m);
        //                btnInPtPrescSu.Enabled = true;
        //            }
        //        }

        //        void displayserivesSU()
        //        {
        //            DataTable dt = ADMDETAI.GetADMDETAI(txtreferenceSU.Text);
        //            string[] arr = new string[16];
        //            ListViewItem itm;
        //            DataRow row;
        //            listView3.Items.Clear();
        //            nmrCurrentTotalSU.Value = 0m;
        //            for (int i = 0; i < dt.Rows.Count; i++)
        //            {
        //                row = dt.Rows[i];
        //                arr[0] = Convert.ToDateTime(row["trans_date"]).ToShortDateString();
        //                arr[1] = row["time"].ToString();
        //                arr[2] = row["facility"].ToString();
        //                arr[3] = row["MASTPROCESS"].ToString();
        //                arr[4] = row["description"].ToString();
        //                arr[5] = row["qty"].ToString();
        //                arr[6] = row["unit"].ToString();
        //                arr[7] = Convert.ToDecimal(row["amount"]).ToString("N2");
        //                arr[8] = "OLDREC"; // new or old record
        //                arr[9] = row["operator"].ToString();
        //                arr[10] = row["op_time"].ToString();
        //                arr[11] = row["process"].ToString();
        //                arr[12] = row["stk_item"].ToString();
        //                arr[13] = row["doctor"].ToString();
        //                arr[14] = row["RECID"].ToString();
        //                arr[15] = row["STORE"].ToString();
        //                nmrCurrentTotalSU.Value += Convert.ToDecimal(arr[7]);
        //                itm = new ListViewItem(arr);
        //                listView3.Items.Add(itm);
        //            }
        //        }

        //        private void btnInPtPrescSu_Click(object sender, EventArgs e)
        //        {
        //            Button btn = sender as Button;
        //            if (btn.Name == "btnInPrescRev" && string.IsNullOrWhiteSpace(txtreferenceRev.Text) || btn.Name == "btnInPtPrescSu" && string.IsNullOrWhiteSpace(txtreferenceSU.Text) || admrecs == null || admrecs.PATIENTNO == null)
        //            {
        //                MessageBox.Show("Patient Record must be Selected...");
        //                return;
        //            }
        //            frmInpPrescriptiondtls inppres = new frmInpPrescriptiondtls(admrecs.REFERENCE, admrecs.GROUPCODE, admrecs.PATIENTNO, admrecs.NAME, false, 0);
        //            inppres.ShowDialog();
        //            //btnInPtPrescSu.Enabled = false;
        //        }

        //*************************************
        //        private void btnMedNoteSu_Click(object sender, EventArgs e)
        //        {
        //            Button btn = sender as Button;
        //            if (btn.Name == "btnMedNoteReg" && string.IsNullOrWhiteSpace(txtreferenceReg.Text) || btn.Name == "btnMedNoteRev" && string.IsNullOrWhiteSpace(txtreferenceRev.Text) || btn.Name == "btnMedNoteSu" && string.IsNullOrWhiteSpace(txtreferenceSU.Text) || admrecs == null || admrecs.PATIENTNO == null)
        //            {
        //                MessageBox.Show("Patient Record must be Selected...");
        //                return;
        //            }

        //            frmSpInstnMednotes spinstnNotes = new frmSpInstnMednotes(admrecs.GROUPCODE, admrecs.PATIENTNO, admrecs.NAME);
        //            spinstnNotes.Show();
        //        }

        //        private void chkbtnStoreSu_Click(object sender, EventArgs e)
        //        {
        //            if (chkbtnStoreSu.Checked) //populate combUnitSu
        //            {
        //                combUnitSu.DataSource = Dataaccess.GetAnytable("", "SMS", "select storecode, name from store", true);
        //                combUnitSu.ValueMember = "storecode";
        //                combUnitSu.DisplayMember = "Name";
        //            }
        //        }

        //        private void chkbtnCostCentreSu_Click(object sender, EventArgs e)
        //        {
        //            if (chkbtnCostCentreSu.Checked) //populate cmbunitsu with cost centre details "P"
        //            {
        //                combUnitSu.DataSource = Dataaccess.GetAnytable("", "CODES", "SELECT TYPE_CODE, NAME FROM COSTCENTRECODES", true); // selcode.getsyscodes("P");
        //                combUnitSu.ValueMember = "Type_code";
        //                combUnitSu.DisplayMember = "name";
        //            }
        //        }

        //        private void combUnitSu_Leave(object sender, EventArgs e)
        //        {
        //            if (!string.IsNullOrWhiteSpace(combUnitSu.Text))
        //            {
        //                mservunit = combUnitSu.SelectedValue.ToString();
        //            }
        //        }

        //        private void txtServeTimeSu_Enter(object sender, EventArgs e)
        //        {
        //            txtServeTimeSu.Text = DateTime.Now.ToShortTimeString();
        //        }

        //        private void combProcessSu_Enter(object sender, EventArgs e)
        //        {
        //            if (string.IsNullOrWhiteSpace(combUnitSu.Text) || chkbtnCostCentreSu.Checked == false &&
        //                chkbtnStoreSu.Checked == false)
        //            {
        //                DialogResult result = MessageBox.Show("Store or Cost Centre must be checked and Service Centre/Facility must be selected...", "INVALID DATA");
        //            }
        //        }

        //        private void dttrans_dateSu_Leave(object sender, EventArgs e)
        //        {
        //            if (dttrans_dateSu.Value.Date > DateTime.Now.Date || dttrans_dateSu.Value.Date < admrecs.ADM_DATE)
        //            {
        //                DialogResult result = MessageBox.Show("Invalid Date Specification...", "In-patient Service Date Error ");
        //                dttrans_dateSu.Value = DateTime.Now.Date;
        //                dttrans_dateSu.Focus();
        //                return;
        //            }
        //        }

        //        private void combProcedureSu_Enter(object sender, EventArgs e)
        //        {
        //            if (string.IsNullOrWhiteSpace(combProcessSu.Text))
        //            {
        //                DialogResult result = MessageBox.Show("Process Code must be specified...", "Admissions Service Update");
        //                combProcessSu.Focus();
        //                return;
        //            }
        //            if (!string.IsNullOrWhiteSpace(combStkItemSu.Text))
        //                return;
        //        }

        //        private void combProcedureSu_LostFocus(object sender, EventArgs e)
        //        {
        //            if (combProcedureSu.SelectedValue == null)
        //            {
        //                // combStkItemSu.Enabled = true;
        //                // combStkItemSu.Focus();
        //                return;
        //            }

        //            procedure = combProcedureSu.SelectedValue.ToString();
        //            //          procedure = (string.IsNullOrWhiteSpace(procedure)) ? combProcedureSu.SelectedValue.ToString() : procedure;
        //            //lblprocedure.Text = procedure;
        //            bool iscapitated, tocontinue;
        //            string xdesc = "", xfacility = "";
        //            decimal rtnamt = 0m;
        //            sutracker = "procedure";

        //            rtnamt = msmrfunc.getFeefromtariff(procedure, bchain.PATCATEG, ref xdesc, ref xfacility);
        //            amtsave = rtnamt;
        //            nmrAmountSu.Value = amtsave;
        //            //  combStkItemSu.Text = xdesc;
        //            iscapitated = false;
        //            tocontinue = true;
        //            int xv = SUDuplicateCheck(xdesc);
        //            if (xv < 1 || isdeleted)
        //                return;
        //            if (xv == 1)
        //            {
        //                nmrAmountSu.Value = amtsave; nmrQtySu.Value = 0m;
        //            }
        //            //check for hmo/nhis tariff
        //            if (bchain.GROUPHTYPE == "C" && !string.IsNullOrWhiteSpace(bchain.HMOSERVTYPE))
        //            {
        //                rtnamt = msmrfunc.hmonhistariffcheck("C", bchain.GROUPHEAD, bchain.HMOSERVTYPE, bchain.PATIENTNO, procedure, ref preauthorization, ref iscapitated, ref tocontinue, combStkItemSu.Text);
        //                if (!tocontinue)
        //                {
        //                    combProcedureSu.Text = procedure = "";
        //                    nmrAmountSu.Value = 0m;
        //                    combProcedureSu.Focus();
        //                    return;
        //                }
        //                if (rtnamt > 0)
        //                {
        //                    amtsave = rtnamt;
        //                    nmrAmountSu.Value = rtnamt;
        //                }
        //            }
        //            if (bchain.GROUPHTYPE == "C")
        //            {
        //                //we check corporate clients tariff for amount to charge
        //                rtnamt = msmrfunc.othercorpClientTariffCheck(bchain.PATIENTNO, bchain.PATCATEG, ref preauthorization, ref tocontinue,
        //                    combStkItemSu.Text, procedure);
        //                if (!tocontinue)
        //                {
        //                    combProcedureSu.Text = procedure = "";
        //                    nmrAmountSu.Value = 0m;
        //                    combProcedureSu.Focus();
        //                    return;
        //                }
        //                if (rtnamt > 0)
        //                {
        //                    amtsave = rtnamt;
        //                    nmrAmountSu.Value = rtnamt;
        //                }
        //            }
        //            if (rtnamt > 0) //we check for special discount for patient
        //            {
        //                rtnamt = msmrfunc.applyDefineddiscountValue(amtsave);
        //            }
        //            if (preauthorization)
        //            {
        //                DialogResult result = MessageBox.Show("Confirm to Initiate Pre-Authorization Request Alerts to Sections...", "Admission Service Update", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //                if (result == DialogResult.Yes)
        //                {
        //                    preauthorizationAlert();
        //                    return;
        //                }
        //            }
        //            nmrQtySu.Focus();
        //            return;
        //        }

        //        private void combStkItemSu_Enter(object sender, EventArgs e)
        //        {
        //            if (!string.IsNullOrWhiteSpace(combProcedureSu.Text))
        //                return;
        //        }

        //        private void combStkItemSu_LostFocus(object sender, EventArgs e)
        //        {
        //            decimal qtyavailable = 0m, cost = 0m, strength = 0m, stkper = 0m, packqty = 0m, pur_cost = 0m;
        //            bool tocontinue = true, iscapitated = false;
        //            string txtdose = "", unitid = "";
        //            int autoremind_period = 0;
        //            sutracker = "stock";

        //            if (string.IsNullOrWhiteSpace(combStkItemSu.Text))
        //            {
        //                combProcedureSu.Focus();
        //                return;
        //            }

        //            if (string.IsNullOrWhiteSpace(combUnitSu.Text))
        //            {
        //                MessageBox.Show("Store / Dispensing Unit must be selected...");
        //                return;
        //            }
        //            int xv = SUDuplicateCheck(combStkItemSu.Text);
        //            if (xv < 1 || isdeleted)
        //                return;
        //            if (combStkItemSu.SelectedValue != null) //valid stock definition was selected - CHECK FOR VALID SELECTION
        //            {
        //                bool nothing = false;
        //                decimal rtnamt = msmrfunc.stockitemValidate(combStkItemSu.SelectedValue.ToString(), ref qtyavailable, 
        //                  ref tocontinue, ref preauthorization, ref iscapitated, combStkItemSu.Text, ref txtdose, ref unitid, 
        //                  ref cost, ref strength, ref stkper, ref packqty, autoremind_period, ref pur_cost, 
        //                  combUnitSu.SelectedValue.ToString(), ref nothing);

        //                if (!tocontinue)
        //                {
        //                    combStkItemSu.Text = "";
        //                    nmrAmountSu.Value = 0m;
        //                    // combStkItemSu.Focus();
        //                    return;
        //                }
        //                if (rtnamt > 0)
        //                {
        //                    amtsave = rtnamt;
        //                    nmrAmountSu.Value = rtnamt;
        //                }
        //                else //we check for special discount for patient
        //                {
        //                    amtsave = cost; //cost of drug on general tariff
        //                }
        //                if (amtsave > 0)
        //                    rtnamt = msmrfunc.applyDefineddiscountValue(amtsave);
        //                if (preauthorization)
        //                {
        //                    DialogResult result = MessageBox.Show("Confirm to Initiate Pre-Authorization Request Alerts to Sections...", "Admission Service Update", MessageBoxButtons.YesNo,
        //                        MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //                    if (result == DialogResult.Yes)
        //                    {
        //                        preauthorizationAlert();
        //                        return;
        //                    }
        //                }
        //                nmrQtySu.Focus();
        //                return;
        //            }
        //        }

        //        private void nmrQtySu_LostFocus(object sender, EventArgs e)
        //        {
        //            if (nmrQtySu.Value > 0)
        //                nmrAmountSu.Value = nmrAmountSu.Value * nmrQtySu.Value;
        //        }

        //        private void txtAmtSu_Leave(object sender, EventArgs e)
        //        {
        //            if (nmrAmountSu.Value < amtsave)
        //            {
        //                DialogResult result = MessageBox.Show("Amount is less than defined value...", "AMOUNT SPECIFICATION ERROR");
        //                nmrAmountSu.Value = amtsave;
        //                return;
        //            }
        //        }

        //        int SUDuplicateCheck(string xdesc)
        //        {
        //            int rtnval = 99;
        //            newrec = true;
        //            isdeleted = false;
        //            DateTime xdate;
        //            for (int i = 0; i < listView3.Items.Count; i++)
        //            {
        //                xdate = Convert.ToDateTime(listView3.Items[i].SubItems[0].ToString());
        //                if (xdate == dttrans_dateSu.Value.Date && listView3.Items[i].SubItems[4].ToString().Trim() == xdesc.Trim())
        //                {
        //                    recno = i;
        //                    if (sutracker == "stock")
        //                        combStkItemSu.Text = listView3.Items[i].SubItems[4].ToString();
        //                    else
        //                        combProcedureSu.Text = listView3.Items[i].SubItems[4].ToString();
        //                    nmrQtySu.Value = Convert.ToDecimal(listView3.Items[i].SubItems[5].ToString());
        //                    combUnitSu.Text = listView3.Items[i].SubItems[6].ToString();
        //                    nmrAmountSu.Value = Convert.ToDecimal(listView3.Items[i].SubItems[7].ToString());
        //                    ServiceDuplicateOptions serviceduplicate = new ServiceDuplicateOptions();
        //                    serviceduplicate.ShowDialog();
        //                    rtnval = msmrfunc.mrGlobals.returnvalue;
        //                    if (rtnval < 1 || rtnval > 3)
        //                    {
        //                        combProcessSu.Focus();
        //                        /*rtnval = 99;
        //                        if (sutracker == "procedure")
        //                            combProcedureSu.Focus();
        //                        else
        //                            combStkItemSu.Focus();
        //                        break;*/
        //                    }
        //                    else if (rtnval == 1) //ADD 
        //                        newrec = true;
        //                    else if (rtnval == 2)  // AMend
        //                        newrec = false;
        //                    else if (rtnval == 3) //Delete
        //                    {
        //                        if (mdoc_seclevel < 7)
        //                        {
        //                            MessageBox.Show("You are not allowed to delete a charted Service on this Platform\r\n\r\n Please See Systmes Administrator or Your Sectional Head", "User Security Level Control");
        //                            rtnval = 0;
        //                            //break;
        //                        }
        //                        else
        //                            isdeleted = true;
        //                        //MessageBox.Show("Item will be removed when you Submit...","Deleted Item");
        //                        //btnAddSu.PerformClick();
        //                    }
        //                    //serviceduplicate.Closed += new EventHandler(serviceduplicate_Closed);
        //                    //serviceduplicate.ShowDialog();
        //                    break;
        //                }
        //            }
        //            if (isdeleted)
        //            {
        //                DialogResult result = MessageBox.Show("Confirm to Delete Record..." + listView3.Items[recno].SubItems[14].Text, "Admission Service Update Details", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //                if (result == DialogResult.Yes)
        //                {
        //                    int xrecid = -1;
        //                    if (!string.IsNullOrWhiteSpace(listView3.Items[recno].SubItems[14].Text))
        //                        xrecid = Convert.ToInt32(listView3.Items[recno].SubItems[14].Text);
        //                    if (xrecid != -1)
        //                    {
        //                        string updstr = "delete from admdetai where recid = '" + xrecid + "'";
        //                        bissclass.UpdateRecords(updstr, "MR");
        //                    }
        //                    listView3.Items[recno].Remove();
        //                    MessageBox.Show("Record Deleted...");
        //                    //28.02.2020 - Adjust Stock if Defined stock deleted - WIP
        //                    isdeleted = false;
        //                    rtnval = 0;
        //                }
        //                //    submitSU();
        //            }
        //            return rtnval;
        //        }

        //        void serviceduplicate_Closed(object sender, EventArgs e)
        //        {
        //            /*	1 - ADD
        //                 2 - Amend
        //                 3 - Delete
        //                 4 - Ignor */
        //            int rtnval = msmrfunc.mrGlobals.returnvalue;
        //            if (rtnval < 1 || rtnval > 3)
        //            {
        //                if (sutracker == "procedure")
        //                    combProcedureSu.Focus();
        //                else
        //                {
        //                    combStkItemSu.Focus();
        //                }
        //                return;
        //            }
        //            else if (rtnval == 1) //ADD 
        //            {
        //                newrec = true;
        //                return;
        //            }
        //            else if (rtnval == 2)  // AMend
        //            {
        //                newrec = false;
        //            }
        //            else if (rtnval == 3) //Delete
        //            {
        //                isdeleted = true;
        //            }
        //        }

        //        private void btnAddSu_Click(object sender, EventArgs e)
        //        {
        //            if (nmrAmountSu.Value == 0 || string.IsNullOrWhiteSpace(combProcedureSu.Text) && string.IsNullOrWhiteSpace(combStkItemSu.Text) || !bissclass.IsPresent(combProcessSu, "Billing Code", false))
        //                return;
        //            if (!bissclass.IsPresent(combUnitSu, "Store", false) || !bissclass.IsPresent(cboFacilitySu, "Facility/Service Centre", false))
        //                return;

        //            string mdoctor = "";
        //            decimal xamt;
        //            if (nmrQtySu.Value < 1)
        //                nmrQtySu.Value = 1m;
        //            if (nmrAmountSu.Value < 1)
        //                nmrAmountSu.Value = 0m;
        //            if (!newrec && !isdeleted)
        //            {
        //                // mdoctor = listView1.Items[recno].SubItems[13].ToString();
        //                xamt = Convert.ToDecimal(listView1.Items[recno].SubItems[7].Text);
        //                // listView1.Items[recno].Remove();
        //                nmrCurrentTotalSU.Value -= xamt; // Convert.ToDecimal(listView1.Items[recno].SubItems[5]);
        //                nmrCurrentTotalSU.Value += nmrAmountSu.Value;
        //                listView3.Items[recno].SubItems[5].Text = nmrQtySu.Value.ToString();
        //                listView3.Items[recno].SubItems[6].Text = combMeasureSu.Text;
        //                listView3.Items[recno].SubItems[7].Text = nmrAmountSu.Value.ToString("N2");
        //                listView3.Items[recno].SubItems[16].Text = "YES"; //UPDATED
        //            }
        //            else if (isdeleted)
        //            {
        //                xamt = Convert.ToDecimal(listView1.Items[recno].SubItems[7].Text);
        //                nmrCurrentTotalSU.Value -= xamt;
        //                listView3.Items[recno].SubItems[8].Text = "DELETED";
        //            }
        //            else
        //            {
        //                nmrCurrentTotalSU.Value += nmrAmountSu.Value;

        //                string[] row = { dttrans_dateSu.Value.ToShortDateString(), txtServeTimeSu.Text, combUnitSu.SelectedValue.ToString(), combProcessSu.SelectedValue.ToString(), string.IsNullOrWhiteSpace(combProcedureSu.Text) ? combStkItemSu.Text : combProcedureSu.Text, nmrQtySu.Value.ToString(), combMeasureSu.Text, nmrAmountSu.Value.ToString("N2"), "NEWREC", woperator, DateTime.Now.ToString(), string.IsNullOrWhiteSpace(combProcedureSu.Text) ? "" : combProcedureSu.SelectedValue.ToString(), combStkItemSu.SelectedValue != null ? combStkItemSu.SelectedValue.ToString() : "", newrec ? "" : mdoctor, "0", combUnitSu.SelectedValue.ToString() };
        //                ListViewItem itm;
        //                itm = new ListViewItem(row);
        //                listView3.Items.Add(itm);
        //            }
        //            procedure = combProcedureSu.Text = combStkItemSu.Text = combMeasureSu.Text = "";
        //            dttrans_dateSu.Value = DateTime.Now.Date;
        //            btnSubmitSU.Enabled = true;
        //            nmrQtySu.Value = 0m;
        //            isdeleted = false;
        //            combProcessSu.Focus();
        //            return;
        //        }

        //        void preauthorizationAlert()
        //        {
        //            //pre authorization may not be necessary for inpatient
        //        }

        public MR_DATA.REPORTS btnSubmitSU_Click(IEnumerable<MR_DATA.REPORTS> tableList)
        {
            //DialogResult result = MessageBox.Show("Confirm to Submit Records...", "Admission Service Update Details", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
            //if (result == DialogResult.Yes)

            submitSU(tableList);

            return vm.REPORTS;
        }

        void submitSU(IEnumerable<MR_DATA.REPORTS> tableList)
        {
            string xd, xdd;
            DateTime xd1;
            //   SqlConnection connection = new SqlConnection(); connection =  Dataaccess.mrConnection();
            //   connection.Open();

            foreach(var row in tableList)
            {
                if (row.categ_save == "OLDREC" && row.txtworkphone != "YES")
                    continue;

                //  xd1 = DateTime.ParseExact(listView3.Items[i].SubItems[10].ToString(), "MM-dd-yyyy HH:mm:ss",null);
                xd1 = Convert.ToDateTime((xdd = row.txtcurrency));

                if (row.categ_save == "DELETED")
                {
                    if (Convert.ToInt32(row.txtbranch) > 0)
                        ADMDETAI.DeleteAdmdetail(Convert.ToInt32(row.txtbranch));
                }
                else
                {
                    ADMDETAI.writeAdmdetails((row.categ_save == "NEWREC") ? true : false, vm.REPORTS.txtreference, Convert.ToDateTime((xd = row.txtclinic)), 
                        row.cbotitle, row.cbokinstate, row.txtsurname, row.cboTribe, row.edtallergies, row.cbogender, Convert.ToDecimal(row.cbotype), 
                        Convert.ToDecimal(row.txtcreditlimit), false, dtmin_date, row.combillcycle, xd1, bchain.GROUPCODE, bchain.PATIENTNO, 
                        row.doctor, row.combFacility, row.categ_save == "NEWREC" ? 0 : Convert.ToInt32(row.txtbranch), row.txtworkphone);
                }
            }

            vm.REPORTS.alertMessage = "Completed...";
            //ClearControls_SU();
            //txtreferenceSU.Focus();
            //btnSubmitSU.Enabled = false;

            return;
        }


        #region
        //        #region

        //        //REVIEWS PAGE

        ////        void ClearControls_REV()
        ////        {
        ////            txtgroupcode_SU.Text = txtPatNoSu.Text = lblfaciitySu.Text = txtNameSu.Text = txtWardRmSu.Text =
        ////                txtbedSU.Text = txtDiagSu.Text = txtgroupheadSu.Text = "";
        ////            combUnitSu.Text = txtServeTimeSu.Text = combProcessSu.Text = combProcedureSu.Text =
        ////                combStkItemSu.Text = combMeasureSu.Text = txtadm_dateSu.Text = txtdischarge_dateSu.Text = "";
        ////            mgrouphtype = txtpatientnoRev.Text = txtgroupcode_Rev.Text = lblfacilityRev.Text = txtPatNameRev.Text = txtWardRoomRev.Text =
        ////                txtbedRev.Text = txtdiagnosisRev.Text = txtadm_dateRev.Text = txtDischargeDateRev.Text = mgrouphead =
        ////                txtPatAddrRev.Text = edtprofileRev.Text = txtgroupheadRev.Text = "";
        ////            dtTreatmentDateRev.Value = DateTime.Now.Date;
        ////            txtcurrentrecs.Text = txtPreviousRecRev.Text = lblLenghtofStay_Rev.Text = "";
        ////            nmrQtySu.Value = nmrAmountSu.Value = 0m;
        ////            this.pictureBox_Rev.Image = null;
        ////        }

        //        private void btnObservationChart_Click(object sender, EventArgs e)
        //        {
        //            if (string.IsNullOrWhiteSpace(txtreferenceRev.Text) || admrecs == null || admrecs.PATIENTNO == null)
        //            {
        //                MessageBox.Show("Patient Record must be Selected...");
        //                return;
        //            }

        //            ObservationCharts obsc = new ObservationCharts(dtfacility, dtdiag, txtreferenceRev.Text, admrecs, woperator);
        //            obsc.Show();
        //        }

        ////        private void txtreferenceRev_Click(object sender, EventArgs e)
        ////        {
        ////            txtreferenceRev.Focus();
        ////        }

        ////        private void txtreferenceRev_Enter(object sender, EventArgs e)
        ////        {
        ////            ClearControls_REV();
        ////            newrec = true;
        ////            if (!timer_Adm.Enabled)
        ////                timer_Adm.Start();
        ////        }

        ////        private void txtreferenceRev_LostFocus(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(txtreferenceRev.Text))
        ////                return;
        ////            DialogResult result;
        ////            if (string.IsNullOrWhiteSpace(AnyCode) && txtreferenceRev.Text.Substring(0, 1) != "A")
        ////            {
        ////                this.txtreferenceSU.Text = bissclass.autonumconfig(txtreferenceRev.Text, true, "A", "999999999");
        ////            }
        ////            //check if reference exist
        ////            AnyCode = Anycode1 = "";
        ////            admrecs = Admrecs.GetADMRECS(txtreferenceRev.Text);
        ////            if (admrecs == null) //new defintion
        ////            {
        ////                result = MessageBox.Show("Invalid Admission Reference...", "ADMISSION DETAILS");
        ////                txtreferenceRev.Text = "";
        ////                return;
        ////            }
        ////            mreference = txtreferenceRev.Text;
        ////            mgrouphtype = admrecs.GROUPHTYPE;
        ////            txtpatientnoRev.Text = admrecs.PATIENTNO;
        ////            txtgroupcode_Rev.Text = admrecs.GROUPCODE;
        ////            lblfacilityRev.Text = admrecs.FACILITY;
        ////            txtPatNameRev.Text = admrecs.NAME;
        ////            txtWardRoomRev.Text = admrecs.ROOM;
        ////            txtbedRev.Text = admrecs.BED;
        ////            txtdiagnosisRev.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.DIAGNOSIS, dtdiag, "name");
        ////            if (txtdiagnosisRev.Text.Trim() != admrecs.DIAGNOSIS_ALL && !string.IsNullOrWhiteSpace(admrecs.DIAGNOSIS_ALL))
        ////                txtdiagnosisRev.Text = admrecs.DIAGNOSIS_ALL.Trim();
        ////            txtadm_dateRev.Text = admrecs.ADM_DATE.ToShortDateString();
        ////            txtDischargeDateRev.Text = admrecs.DISCHARGE;
        ////            DateTime xdischarge = string.IsNullOrWhiteSpace(admrecs.DISCHARGE) ? DateTime.Now.Date : Convert.ToDateTime(admrecs.DISCHARGE);
        ////            lblLenghtofStay_Rev.Text = xdischarge.Subtract(admrecs.ADM_DATE).TotalDays.ToString() + " day(s)";
        ////            mgrouphead = admrecs.GROUPHEAD;
        ////            bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);
        ////            txtPatAddrRev.Text = bchain.RESIDENCE;
        ////            edtprofileRev.Text = patientprofile();
        ////            txtgroupheadRev.Text = getgrouphead(bchain.GROUPHEAD, bchain.GHGROUPCODE, bchain.GROUPHTYPE);
        ////            if (txtgroupheadRev.Text.Trim() == "Abort")
        ////            {
        ////                txtreferenceRev.Focus();
        ////                return;
        ////            }
        ////            displayPatientPicture(this.pictureBox_Rev, bchain.PICLOCATION);
        ////            if (admrecs.DISCHARGE != "")
        ////            {
        ////                result = MessageBox.Show("This Patient has been discharged on " + admrecs.DISCHARGE, admrecs.NAME);
        ////                return;
        ////            }
        ////            else
        ////            {
        ////                btnSaveRev.Enabled = true;
        ////                btnObservationChart.Enabled = btnFluidChatRev.Enabled = btnDiabeticChatRev.Enabled = btnInPrescRev.Enabled = true;
        ////                if (msection == "4" && mdoc_seclevel >= 5)
        ////                    chkProtectRev.Enabled = chkEncryptRev.Enabled = true;

        ////                medhistryRev(true);
        ////                ImageInfo();
        ////                nmrCummAmt_Rev.Value = getAccummulatedCharge(txtreferenceRev.Text, admrecs.ACAMT);
        ////                dtTreatmentDateRev.Focus();
        ////            }
        ////        }

        ////        void ImageInfo()
        ////        {
        ////            DataTable dtimage = Dataaccess.GetAnytable("", "MR", "select TRANS_DATE,PIC1,NOTE1, PIC2, NOTE2, PIC3, NOTE3, PIC4, NOTE4, PIC5, NOTE5, TOTPIC, FACILITY1, FACILITY2, FACILITY3, FACILITY4, FACILITY5, pdffile1, pdffile2, pdffile3, pdffile4, pdffile5 from medhpic where ltrim(rtrim(groupcode)) = '" + admrecs.GROUPCODE.Trim() + "' and ltrim(rtrim(patientno)) = '" + admrecs.PATIENTNO.Trim() + "'", false);

        ////            string[] arr = new string[17];
        ////            ListViewItem itm;
        ////            foreach (DataRow row in dtimage.Rows)
        ////            {
        ////                arr[0] = Convert.ToDateTime(row["trans_date"]).ToShortDateString();
        ////                arr[1] = row["totpic"].ToString();
        ////                arr[2] = row["facility1"].ToString();
        ////                arr[3] = row["pic1"].ToString();
        ////                arr[4] = row["note1"].ToString();
        ////                arr[5] = row["facility2"].ToString();
        ////                arr[6] = row["pic2"].ToString();
        ////                arr[7] = row["note2"].ToString();
        ////                arr[8] = row["facility3"].ToString();
        ////                arr[9] = row["pic3"].ToString();
        ////                arr[10] = row["note3"].ToString();
        ////                arr[11] = row["facility4"].ToString();
        ////                arr[12] = row["pic4"].ToString();
        ////                arr[13] = row["note4"].ToString();
        ////                arr[14] = row["facility5"].ToString();
        ////                arr[15] = row["pic5"].ToString();
        ////                arr[16] = row["note5"].ToString();

        ////                itm = new ListViewItem(arr);
        ////                listView_Image.Items.Add(itm);
        ////            }
        ////        }

        ////        string patientprofile()
        ////        {
        ////            //edtprofileRev.Text = 
        ////            string xtext =
        ////            "[ " + bchain.SEX + " ] ;    AGE : ";
        ////            string xx = (bchain.BIRTHDATE.Year > 1920) ? bissclass.agecalc(bchain.BIRTHDATE, DateTime.Now.Date) :
        ////            (bchain.RELATIONSH == "C") ? "Minor" : (bchain.RELATIONSH == "S" || bchain.RELATIONSH == "W" ||
        ////            bchain.RELATIONSH == "H") ? "< Adult >" : "...";
        ////            string xx1 = "     M_STATUS : < " + bchain.M_STATUS + " > ";
        ////            xtext = xtext + xx + "; " + xx1;
        ////            return xtext;
        ////        }

        ////        void medhistryRev(bool allrecords)
        ////        {
        ////            DateTime startdate, enddate;

        ////            if (allrecords)
        ////            {
        ////                startdate = admrecs.ADM_DATE.AddDays(-30);
        ////                enddate = DateTime.Now.Date;// (DateTime.Now.Date - admrecs.ADM_DATE).TotalDays > 7 ? DateTime.Now.Date.AddDays(-7) : admrecs.ADM_DATE;
        ////            }
        ////            else
        ////            {
        ////                startdate = dtHistoryDatefrom.Value.Date;
        ////                enddate = dtHistoryDateto.Value.Date;
        ////            }
        ////            dtHistoryDatefrom.Value = startdate;
        ////            dtHistoryDateto.Value = enddate;
        ////            if (chkQuerybackup.Checked)
        ////            {
        ////                this.txtPreviousRecRev.BackColor = System.Drawing.Color.White;
        ////                this.txtPreviousRecRev.ForeColor = System.Drawing.Color.Blue;
        ////                txtPreviousRecRev.Text = MedHist.GetMEDHISTBKUPCaseNotes(bchain.GROUPCODE, bchain.PATIENTNO, dtHistoryDatefrom.Value, dtHistoryDateto.Value);
        ////                //LightGray
        ////            }
        ////            else
        ////            {
        ////                this.txtPreviousRecRev.BackColor = System.Drawing.Color.LightGray;
        ////                this.txtPreviousRecRev.ForeColor = System.Drawing.Color.Black;
        ////                txtPreviousRecRev.Text = MedHist.GetMEDHISTCaseNotes(bchain.GROUPCODE, bchain.PATIENTNO, false, true, startdate, enddate, bchain, "DESC");
        ////            }
        ////            return;
        ////        }

        //        //    newrecRev = true; //OLD PREVIOUS HISTORY RETRIVE SEGMENT, REPLACE ABOVE 16.11.2016
        //        //    string xaccesscode = "";
        //        //    if (!allrecords)
        //        //    {
        //        //        MedHist medhistRev = MedHist.GetMEDHIST(bchain.GROUPCODE, bchain.PATIENTNO, txtreferenceRev.Text, false, true,
        //        //            dtTreatmentDateRev.Value.Date);
        //        //        if ( medhistRev != null )
        //        //        {
        //        //            newrec = false;
        //        //            if (medhistRev.PROTECTED > 0 && mdoc_seclevel < medhistRev.PROTECTED )
        //        //            {
        //        //                DialogResult result = MessageBox.Show("Access to Secured Medical History Records Denied...", "PROTECTED MEDICAL HISTORY NOTES");
        //        //                txtreferenceRev.Text = ""; 
        //        //                txtreferenceRev.Focus();
        //        //                return;
        //        //            }
        //        //            if (medhistRev.PROTECTED > 0 && medhistRev.ENCHRYPTED )
        //        //            {
        //        //              /*  msmrfunc.frmInputBox("Medical History Enchrypted Access Code", "This Medical History is Enchrypted... Enter                             Access Code :",ref xaccesscode);
        //        //                if (string.IsNullOrWhiteSpace(xaccesscode) || xaccesscode != encryptedaccesscode)
        //        //                {
        //        //                    MessageBox.Show("Invalid Access Code...", "Access Code to Enchrypted Medical History", msgBoxHandler);
        //        //                    txtreferenceRev.Focus();
        //        //                    return;
        //        //                }*/
        //        //                POPREAD popread = new POPREAD("Medical History Enchrypted Access Code", "This Medical History is Enchrypted... Enter                             Access Code :",ref xaccesscode,false );
        //        //                popread.Closed += new EventHandler(popread_Closed);
        //        //                popread.ShowDialog();

        //        //            }
        //        //            txtcurrentrecs.Text = medhistRev.COMMENTS;
        //        //            chkProtectRev.Checked = (medhistRev.PROTECTED > 0) ? true : false;
        //        //            chkEncryptRev.Checked = (medhistRev.ENCHRYPTED) ? true : false;
        //        //        }
        //        //        else
        //        //        {
        //        //            txtcurrentrecs.Text = "==> Admission Update BY : " + woperator.Trim() + " @ " + DateTime.Now.ToString("HH:mmtt ") +
        //        //                " Date Admitted : " + txtadm_dateRev.Text + " : Diag : " + txtdiagnosisRev.Text + "\r\n";
        //        //        }
        //        //        btnPrescriptionRev.Enabled = true;
        //        //        btnInvProcRev.Enabled = true;
        //        //        btnTTHRev.Enabled = true;
        //        //        txtcurrentrecs.Focus();
        //        //        return;
        //        //    }
        //        //    else
        //        //    {
        //        //        DataTable dt = MedHist.GetHISTByPatient(txtgroupcode_Rev.Text, txtpatientnoRev.Text, "D", dtTreatmentDateRev.Value.Date,
        //        //             dtTreatmentDateRev.Value.Date, true);
        //        //        txtPreviousRecRev.Text = "";
        //        //        DataTable disp;
        //        //        DateTime xdate;
        //        //        for (int i = 0; i < dt.Rows.Count; i++)
        //        //        {
        //        //            txtPreviousRecRev.Text = txtPreviousRecRev.Text + dt.Rows[0]["COMMENTS"].ToString() + "\r\n";
        //        //            xdate = Convert.ToDateTime(dt.Rows[0]["trans_date"]);
        //        //            //get prescriptons
        //        //            disp = DISPENSA.GetDISPENSA(bchain.GROUPCODE, bchain.PATIENTNO, xdate, true );
        //        //            if ( disp.Rows.Count > 0 )
        //        //            {
        //        //               txtPreviousRecRev.Text = txtPreviousRecRev.Text + 
        //        //               "S/N Drugs Details                  Unit Presc'd    Given         Cost  D/ I /D"+"\r\n"+
        //        //               "---------------------------------------------------------------------------------------" + "\r\n";
        //        //               for (int xd = 0; xd < disp.Rows.Count; xd++)
        //        //               {
        //        //                    txtPreviousRecRev.Text = txtPreviousRecRev.Text + 
        //        //                    dt.Rows[xd]["itemno"].ToString().Trim()+"  "+dt.Rows[xd]["stk_desc"].ToString()+" "+dt.Rows[xd]["unit"].ToString()+
        //        //                    " "+dt.Rows[xd]["qty_pr"].ToString()+"  "+dt.Rows[xd]["qty_gv"].ToString()+"         "+
        //        //                    dt.Rows[xd]["cost"].ToString()+" "+dt.Rows[xd]["cdose"].ToString().Trim()+"x"+
        //        //                    dt.Rows[xd]["cinterval"].ToString().Trim()+"x"+
        //        //                    dt.Rows[xd]["cduration"].ToString().Trim()+"  ("+dt.Rows[xd]["sp_inst"].ToString().Trim()+"\r\n";
        //        //               }
        //        //            }
        //        //            txtPreviousRecRev.Text = txtPreviousRecRev.Text + string.Concat(Enumerable.Repeat("_", 160));
        //        //        }
        //        //    }
        //        //}

        //        void popread_Closed(object sender, EventArgs e)
        //        {
        //            POPREAD popread = sender as POPREAD;
        //            string xfolder = msmrfunc.mrGlobals.anycode;
        //            if (string.IsNullOrWhiteSpace(xfolder) || xfolder.Trim() != encryptedaccesscode)
        //            {
        //                DialogResult result = MessageBox.Show("Invalid Access Code...", "Access Code to Enchrypted Medical History");
        //                txtreferenceRev.Text = "";
        //                txtreferenceRev.Select();
        //                return;
        //            }
        //        }

        ////        void DisplayDetailsRev()
        ////        {
        ////            txtPatNameRev.Text = admrecs.NAME;
        ////            lblfacilityRev.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.FACILITY, dtfacility, "name");
        ////            txtWardRoomRev.Text = admrecs.ROOM;
        ////            txtbedRev.Text = admrecs.BED;
        ////            txtadm_dateRev.Text = admrecs.ADM_DATE.ToShortDateString();
        ////            txtDischargeDateRev.Text = admrecs.DISCHARGE;
        ////            txtdiagnosisRev.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.DIAGNOSIS, dtdiag, "name") + " " + admrecs.DIAGNOSIS_ALL.Trim();
        ////        }

        ////        private void dtTreatmentDateRev_LostFocus(object sender, EventArgs e)
        ////        {
        ////            ExitReviewDate();
        ////        }

        ////        void ExitReviewDate()
        ////        {
        ////            DialogResult result;
        ////            if (dtTreatmentDateRev.Value.Date > DateTime.Now.Date || dtTreatmentDateRev.Value.Date < admrecs.ADM_DATE)
        ////            {
        ////                result = MessageBox.Show("Invalid Date Specification...", "In-patient Service Date Error ");
        ////                dtTreatmentDateRev.Value = DateTime.Now.Date;
        ////                dtTreatmentDateRev.Focus();
        ////                return;
        ////            }

        ////            if (bchain == null || string.IsNullOrWhiteSpace(bchain.PATIENTNO) || string.IsNullOrWhiteSpace(txtreferenceRev.Text))
        ////                return;
        ////            newrecRev = true;
        ////            string xaccesscode = ""; retrieved_note = "";
        ////            txtTimeTrtmtRev.Text = DateTime.Now.ToShortTimeString();
        ////            //  medhistryRev(false);
        ////            MedHist medhistRev = MedHist.GetMEDHIST(bchain.GROUPCODE, bchain.PATIENTNO, txtreferenceRev.Text, false, true, dtTreatmentDateRev.Value.Date, "DESC");
        ////            if (medhistRev != null)
        ////            {
        ////                newrecRev = false;
        ////                if (medhistRev.PROTECTED > 0 && mdoc_seclevel < medhistRev.PROTECTED)
        ////                {
        ////                    result = MessageBox.Show("Access to Secured Medical History Records Denied...", "PROTECTED MEDICAL HISTORY NOTES");
        ////                    txtreferenceRev.Text = "";
        ////                    txtreferenceRev.Focus();
        ////                    return;
        ////                }
        ////                if (medhistRev.PROTECTED > 0 && medhistRev.ENCHRYPTED)
        ////                {
        ////                    /*  msmrfunc.frmInputBox("Medical History Enchrypted Access Code", "This Medical History is Enchrypted... Enter                             Access Code :",ref xaccesscode);
        ////                    if (string.IsNullOrWhiteSpace(xaccesscode) || xaccesscode != encryptedaccesscode)
        ////                    {
        ////                        MessageBox.Show("Invalid Access Code...", "Access Code to Enchrypted Medical History", msgBoxHandler);
        ////                        txtreferenceRev.Focus();
        ////                        return;
        ////                    }*/
        ////                    POPREAD popread = new POPREAD("Medical History Enchrypted Access Code", "This Medical History is Enchrypted... Enter Access Code :", ref xaccesscode, false, false, "", "", "", false, "", "");
        ////                    popread.Closed += new EventHandler(popread_Closed);
        ////                    popread.ShowDialog();

        ////                }
        ////                txtcurrentrecs.Text = retrieved_note = medhistRev.COMMENTS.Trim();
        ////                txtcurrentrecs.Text = txtcurrentrecs.Text + "\r\n";
        ////                chkProtectRev.Checked = (medhistRev.PROTECTED > 0) ? true : false;
        ////                chkEncryptRev.Checked = (medhistRev.ENCHRYPTED) ? true : false;
        ////            }
        ////            else if (msection == "4")
        ////            {
        ////                txtcurrentrecs.Text = "==> Admission Update BY : " + woperator.Trim() + " @ " + DateTime.Now.ToString("HH:mmtt ") + " Date Admitted : " + txtadm_dateRev.Text + " : Diag : " + txtdiagnosisRev.Text + "\r\n\r\n";
        ////            }
        ////            if (msection == "4")
        ////                btnPrescriptionRev.Enabled = btnInvProcRev.Enabled = btnTTHRev.Enabled = true;
        ////            else
        ////            {
        ////                txtcurrentrecs.ReadOnly = true;
        ////                btnSaveRev.Enabled = false;
        ////            }
        ////            timer_Adm.Enabled = timer_Doc.Enabled = false;
        ////            savedCaseNote = txtcurrentrecs.Text.Trim();
        ////            txtcurrentrecs.Focus();
        ////            return;
        ////        }

        //private void btnInvProcRev_Click(object sender, EventArgs e)
        //{
        //    timer_Adm.Enabled = timer_Doc.Enabled = false;
        //    initglobalvariables();
        //    rtnstring = "";
        //    //msmrf01a invrequest = new msmrf01a();
        //    frmInvProcRequest invrequest = new frmInvProcRequest("C", txtreferenceRev.Text, bchain.GROUPCODE, bchain.PATIENTNO, bchain.GROUPHTYPE, dtTreatmentDateRev.Value.Date, bchain.NAME, bchain.GROUPHEAD, bchain.GHGROUPCODE, true, ref rtnstring, admrecs.ROOM + ":" + admrecs.BED, mlastno, mdoctor, msection, mcanadd, mcanalter, mcandelete, woperator);
        //    invrequest.Closed += new EventHandler(invrequest_Closed);
        //    invrequest.Show();
        //}

        //        void initglobalvariables()
        //        {
        //            /*      msmrfunc.mrGlobals.mpatientno = bchain.PATIENTNO;
        //                    msmrfunc.mrGlobals.mreference = txtreferenceRev.Text;
        //                    msmrfunc.mrGlobals.mfacility = lblfacilityRev.Text;
        //                    msmrfunc.mrGlobals.mtrans_date = dtTreatmentDateRev.Value.Date;
        //                    msmrfunc.mrGlobals.minpatient = true;
        //                    msmrfunc.mrGlobals.mtth = false;*/
        //            msmrfunc.mrGlobals.rtnstring = "";
        //            msmrfunc.mrGlobals.percentageDiscountToApply = (bchain.GROUPHTYPE == "P") ? patients.discount : customers.Discount;
        //            //      msmrfunc.mrGlobals.mdoctor = woperator; // txtdoctor.Text;
        //            msmrfunc.mrGlobals.inp2medhist = "";
        //            //msmrfunc.mrGlobals.isanc = ancrecord;
        //            //      msmrfunc.mrGlobals.cashpaying = false; 
        //            for (int i = 0; i < 5; i++)
        //            {
        //                msmrfunc.mrGlobals.requestalerta_[i] = "";
        //            }
        //            msmrfunc.mrGlobals.requestalerta_count = 0;
        //            msmrfunc.mrGlobals.returnvalue = 0;
        //        }

        //private void btnprescriptions_Click(object sender, EventArgs e)
        //{
        //    timer_Adm.Enabled = timer_Doc.Enabled = false;
        //    initglobalvariables();
        //    PrescriptionsNew presc = new PrescriptionsNew(admrecs.GROUPCODE, admrecs.PATIENTNO, admrecs.REFERENCE, 
        //      admrecs.FACILITY, dtTreatmentDateRev.Value.Date, true, false, mdoctor, false, cashpaying, woperator, msection);
        //    presc.Closed += new EventHandler(presc_Closed);
        //    presc.Show();
        //}

        //void presc_Closed(object sender, EventArgs e)
        //{
        //    // throw new NotImplementedException();
        //    PrescriptionsNew presc_Closed = sender as PrescriptionsNew;
        //    {
        //        if (!string.IsNullOrWhiteSpace(Session["inp2medhist"].ToString())) // msmrfunc.mrGlobals.rtnstring))
        //        {
        //            txtcurrentrecs.Text += "\r\n" + Session["inp2medhist"].ToString(); // msmrfunc.mrGlobals.rtnstring.Trim();
        //            MessageBox.Show("Please Remember to Click the Save Button for this Review...", "A T T E N T I O N !!!", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
        //        }
        //    }

        //    timer_Adm.Enabled = timer_Doc.Enabled = true;
        //    return;
        //}

        //        void invrequest_Closed(object sender, EventArgs e)
        //        {
        //            if (!string.IsNullOrWhiteSpace(Session["opdstring"].ToString())) //Session["rtnstring"].ToString())) // msmrfunc.mrGlobals.rtnstring))
        //            {
        //                txtcurrentrecs.Text = txtcurrentrecs.Text + "\r\n" + Session["opdstring"].ToString();
        //                MessageBox.Show("Please Remember to Click the Save Button for this Review...", "A T T E N T I O N !!!", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
        //                //msmrfunc.mrGlobals.rtnstring.Trim();
        //            }
        //            timer_Adm.Enabled = timer_Doc.Enabled = true;
        //            return;
        //        }

        //        //service items
        string getdefinedprocess(string xprocess)
        {
            string xrtn = "";
            if (!string.IsNullOrWhiteSpace(xprocess))
            {
                xprocess = xprocess.Trim();
                for (int i = 0; i < dispserv.Rows.Count; i++)
                {
                    if (dispserv.Rows[i]["Reference"].ToString().Trim() == xprocess)
                    {
                        xrtn = dispserv.Rows[i]["Description"].ToString();
                        break;
                    }
                }
            }
            return xrtn;
        }

        ////        private void combprocedureSI_Enter(object sender, EventArgs e)
        ////        {
        ////            btnDeleteSI.Enabled = false;
        ////        }

        ////        private void combprocedureSI_Leave(object sender, EventArgs e)
        ////        {
        ////            newrec = true;
        ////            if (string.IsNullOrWhiteSpace(combprocedureSI.Text))
        ////                return;
        ////            procedure = (string.IsNullOrWhiteSpace(procedure)) ? combprocedureSI.SelectedValue.ToString() : procedure;
        ////            if (!string.IsNullOrWhiteSpace(procedure))
        ////            {
        ////                txtdescriptionSI.Text = combprocedureSI.Text;
        ////                //check if item has been selected before
        ////                for (int i = 0; i < listViewSI.Items.Count; i++)
        ////                {
        ////                    if (listViewSI.Items[i].SubItems[1].ToString().Trim() == combprocedureSI.SelectedValue.ToString().Trim())
        ////                    {
        ////                        newrec = false;
        ////                        btnDeleteSI.Enabled = true;
        ////                        recno = i;
        ////                        txtdescriptionSI.Text = listViewSI.Items[i].SubItems[0].ToString();
        ////                        break;
        ////                    }
        ////                }
        ////            }
        ////        }

        ////        private void btnAddSI_Click(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(txtdescriptionSI.Text))
        ////            {
        ////                combprocedureSI.Focus();
        ////                return;
        ////            }
        ////            string[] row = { txtdescriptionSI.Text, combprocedureSI.SelectedValue.ToString(), (newrec) ? "NewRec" : "OldRec" };
        ////            ListViewItem itm;
        ////            itm = new ListViewItem(row);
        ////            listViewSI.Items.Add(itm);
        ////            procedure = "";
        ////            btnsubmitSI.Enabled = true;
        ////        }

        public MR_DATA.MR_DATAvm btnsubmitSI_Click(IEnumerable<MR_DATA.REPORTS> tableList)
        {
            //if (mdoc_seclevel < 9)
            //{
            //    MessageBox.Show("Access Denied... See your Systems Administrator!");
            //    return;
            //}

            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            connection.Open();

            foreach(var row in tableList)
            {
                SqlCommand insertCommand = new SqlCommand();
                if (row.cboTribe == "OldRec") //old rec
                    insertCommand.CommandText = "Dispserv_Update";
                else
                    insertCommand.CommandText = "Dispserv_Add";

                insertCommand.Connection = connection;
                insertCommand.CommandType = CommandType.StoredProcedure;

                insertCommand.Parameters.AddWithValue("@Reference", row.cbotitle);
                insertCommand.Parameters.AddWithValue("@Description", row.diagnosis);
                insertCommand.ExecuteNonQuery();
            }

            //for (int i = 0; i < listViewSI.Items.Count; i++)
            //{
            //    SqlCommand insertCommand = new SqlCommand();
            //    if (listViewSI.Items[i].SubItems[2].ToString().Trim() == "OldRec") //old rec
            //        insertCommand.CommandText = "Dispserv_Update";
            //    else
            //        insertCommand.CommandText = "Dispserv_Add";
            //    insertCommand.Connection = connection;
            //    insertCommand.CommandType = CommandType.StoredProcedure;

            //    insertCommand.Parameters.AddWithValue("@Reference", listViewSI.Items[i].SubItems[1].ToString());
            //    insertCommand.Parameters.AddWithValue("@Description", listViewSI.Items[i].SubItems[0].ToString());
            //    insertCommand.ExecuteNonQuery();
            //}

            connection.Close();
            vm.REPORTS.ActRslt = "Done...";

            loadserviceItems();
            //btnsubmitSI.Enabled = false;

            return vm;
        }

        ////        private void btnDeleteSI_Click(object sender, EventArgs e)
        ////        {
        ////            if (mdoc_seclevel < 9)
        ////            {
        ////                MessageBox.Show("Access Denied... See your Systems Administrator!");
        ////                return;
        ////            }
        ////            DialogResult result = MessageBox.Show("Confirm to Delete...." + listViewSI.Items[recno].SubItems[0].Text, "Service Items Headers", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        ////            if (result == DialogResult.No)
        ////                return;

        ////            if (listViewSI.Items[recno].SubItems[2].Text.Trim() == "OldRec")
        ////            {
        ////                string updstr = "delete from Dispserv where rtrim(reference) = '" + listViewSI.Items[recno].SubItems[1].Text.Trim() + "'";
        ////                bissclass.UpdateRecords(updstr, "MR");
        ////            }
        ////            listViewSI.Items[recno].Remove();
        ////            btnDeleteSI.Enabled = false;
        ////        }

        ////        private void txtTimeTrtmtRev_Enter(object sender, EventArgs e)
        ////        {
        ////            //txtTimeTrtmtRev.Text = DateTime.Now.ToShortTimeString();
        ////            //txtTimeTrtmtRev.Focus();
        ////            //return;
        ////        }

        ////private void btnSaveRev_Click()
        ////{
        ////    if (string.IsNullOrWhiteSpace(txtreferenceRev.Text) || admrecs == null || admrecs.PATIENTNO == null)
        ////    {
        ////        MessageBox.Show("Patient Record must be Selected...");
        ////        return;
        ////    }
        ////    DialogResult result = MessageBox.Show("Confirm to Save Records...", "Medical History", MessageBoxButtons.YesNoCancel,
        ////           MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        ////    if (result == DialogResult.Yes)
        ////    {
        ////        saveRevDetails();
        ////        txtreferenceRev.Focus();
        ////        return;
        ////    }

        ////    return;
        ////}

        public MR_DATA.REPORTS saveRevDetails(Admrecs admrecs, billchaindtl bchain)
        {
            newrecRev = vm.REPORTS.newrec;
            newrec = vm.REPORTS.newrec;
            DateTime treatmentDate = Convert.ToDateTime(vm.REPORTS.REPORT_TYPE1);

            MedHist medhistRev = MedHist.GetMEDHIST(bchain.GROUPCODE, bchain.PATIENTNO, vm.REPORTS.txtreference, 
                false, true, treatmentDate.Date, "DESC");

            newrecRev = (medhistRev == null || string.IsNullOrWhiteSpace(medhistRev.PATIENTNO)) ? true : false;

            if (!newrecRev && retrieved_note != "")
            {
                string present_note = medhistRev.COMMENTS.Trim();

                if (present_note.Length != retrieved_note.Length) //wahala!!!
                {
                    vm.REPORTS.alertMessage = "This Patient's Medical History note for this date has been ALTERED by (" +
                        medhistRev.OPERATOR.Trim() + " @ " + medhistRev.DTIME.ToLongTimeString() + "\r\n after YOU had " +
                        "retrieved it....YOUR updates cannot be saved now... \r\n YOU must therefore copy your updates to " +
                        "a CLIPBOARD \r\n(Highlight text and Press CTRL+C to copy or Right-Click your mouse on highlighted text and Click on Copy) \r\n" +
                        "Thereafter, GO BACK TO TRANSACTION DATE AGAIN AND TAB TO RETRIEVE A FRESH COPY OF THE MED. HISTORY " +
                        "NOTE;\r\n GO TO END OF TEXT AND PRESS CTRL+V or Right-Click your Mouse and Click on Paste \r\nto Paste " +
                        "what you saved to the CLIBOARD...\r\n Thereafter, CLICK THE SAVE BUTTON TO TRY THE SAVE AGAIN...TKS";

                    //txtcurrentrecs.Focus();
                    return vm.REPORTS; 
                }
            }

            vm.REPORTS.chkADVCorporate = false; // btnSaveRev.Enabled
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand insertCommand = new SqlCommand();
            insertCommand.CommandText = (newrecRev) ? "MEDHIST_Add" : "MEDHIST_Update";
            insertCommand.Connection = connection;
            insertCommand.CommandType = CommandType.StoredProcedure;

            insertCommand.Parameters.AddWithValue("@reference", vm.REPORTS.txtreference);
            insertCommand.Parameters.AddWithValue("@patientno", bchain.PATIENTNO);
            insertCommand.Parameters.AddWithValue("@name", bchain.NAME);
            insertCommand.Parameters.AddWithValue("@trans_date", treatmentDate.Date);
            insertCommand.Parameters.AddWithValue("@CTIME", DateTime.Now.ToShortTimeString());
            insertCommand.Parameters.AddWithValue("@comments", vm.REPORTS.edtallergies.Trim() + "\r\n Reviewed by " + woperator + " - " + DateTime.Now.ToString("dd/MM/yyyy @ HH:mm:sst"));
            insertCommand.Parameters.AddWithValue("@posted", false);
            insertCommand.Parameters.AddWithValue("@post_date", (newrec) ? DateTime.Now : medhistRev.POST_DATE);
            insertCommand.Parameters.AddWithValue("@billed", (newrecRev) ? "N" : medhistRev.BILLED);
            insertCommand.Parameters.AddWithValue("@billref", (newrecRev) ? " " : medhistRev.BILLREF);
            insertCommand.Parameters.AddWithValue("@amount", newrecRev ? 0m : medhistRev.AMOUNT);
            insertCommand.Parameters.AddWithValue("@groupcode", bchain.GROUPCODE);
            insertCommand.Parameters.AddWithValue("@weight", (newrecRev) ? "" : medhistRev.WEIGHT);
            insertCommand.Parameters.AddWithValue("@height", newrecRev ? "" : medhistRev.HEIGHT);
            insertCommand.Parameters.AddWithValue("@bp_s", newrecRev ? "" : medhistRev.BP_S);
            insertCommand.Parameters.AddWithValue("@bp_stn", newrecRev ? "" : medhistRev.BP_STN);
            insertCommand.Parameters.AddWithValue("@temp", newrecRev ? "" : medhistRev.TEMP);
            insertCommand.Parameters.AddWithValue("@pulse", newrecRev ? "" : medhistRev.PULSE);
            insertCommand.Parameters.AddWithValue("@respiratio", newrecRev ? "" : medhistRev.RESPIRATIO);
            insertCommand.Parameters.AddWithValue("@others", newrecRev ? "" : medhistRev.OTHERS);
            insertCommand.Parameters.AddWithValue("@doctor", (newrec) ? woperator : medhistRev.DOCTOR);
            insertCommand.Parameters.AddWithValue("@clinic", newrecRev ? "" : medhistRev.CLINIC);
            insertCommand.Parameters.AddWithValue("@protected", (mdoc_seclevel >= 5m && vm.REPORTS.chkByBranch) ? mdoc_seclevel : 0);
            insertCommand.Parameters.AddWithValue("@enchrypted", (vm.REPORTS.chkReportSum) ? true : false);
            insertCommand.Parameters.AddWithValue("@GHGROUPCODE", bchain.GHGROUPCODE);
            insertCommand.Parameters.AddWithValue("@GROUPHEAD", bchain.GROUPHEAD);
            insertCommand.Parameters.AddWithValue("@OPERATOR", woperator);
            insertCommand.Parameters.AddWithValue("@DTIME", DateTime.Now);

            try
            {
                connection.Open();
                insertCommand.ExecuteNonQuery();
            }
            catch (SqlException ex)
            {
                vm.REPORTS.alertMessage = "" + ex;
                return vm.REPORTS;
            }
            finally
            {
                connection.Close();
            }

            //22.08.2019 update backup file. To hold all medhist saved. Med Hist Saved (20.08.2019) for a patient at Harmony vanished.
            MedHist.UpdateMedHistBackup(bchain.GROUPCODE, bchain.PATIENTNO, treatmentDate.Date,
                vm.REPORTS.edtallergies.Trim(), woperator, vm.REPORTS.txtreference);

            //Timer1Execute();
            //txtreferenceRev.Focus();

            return vm.REPORTS; 
        }

        //private void btnTTHRev_Click(object sender, EventArgs e)
        //{
        //    //DialogResult result = MessageBox.Show("The Button is Strictly for Take Home Drugs Prescription Management... \r\n\r\n WARD NURSES SHOULD BE INSTRUCTED TO CHART THE PRESCRIPTION \r\n And Flag 'GIVEN' ON TREATMENT CHART Before Patient Discharge FROM THE SYSTEM...\r\n\r\n               CONTINUE... ? ", "T.T.H. Prescription", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //    //if (result == DialogResult.No)
        //    //    return;
        //    DialogResult result = MessageBox.Show("The Button is Strictly for Take Home Drugs Prescription Management... \r\n\r\n COST OF THIS PRESCRIPTION WILL BE AUTO-ADDED TO PATIENT'S ADMISSON BILL \r\n\r\n               CONTINUE... ? ", "T.T.H. Prescription", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //    if (result == DialogResult.No)
        //        return;
        //    timer_Adm.Enabled = timer_Doc.Enabled = false;
        //    initglobalvariables();
        //    //  msmrfunc.mrGlobals.mtth = true;
        //    PrescriptionsNew presc = new PrescriptionsNew(admrecs.GROUPCODE, admrecs.PATIENTNO, admrecs.REFERENCE, admrecs.FACILITY, dttrans_dateD.Value.Date, true, true, mdoctor, false, cashpaying, woperator, msection);
        //    presc.Closed += new EventHandler(presc_Closed);
        //    presc.Show();
        //}

        //        Change Bed

        ////        void ClearControls_CB()
        ////        {
        ////            txtgroupcode_BC.Text = txtpatientnoCB.Text = txtfacilityCB.Text = txtnameCB.Text = txtroomCB.Text = txtBedCB.Text = txtdiagosisCB.Text = txtgroupheadchangebed.Text = combfacilityCB.Text = txttimeCB.Text = txtoldRateCB.Text = combnewBedCB.Text = combnewRoomCB.Text = txtadm_dateCB.Text = txtdischargedtCB.Text = lbllenghtofStay_CB.Text = edtprofileChangeBed.Text = txtaddressCB.Text = combfacilityCB.Text = "";
        ////            nmrAmountSu.Value = nmrNewRateCB.Value = 0m;
        ////            dttrans_dateCB.Value = DateTime.Now.Date;
        ////            this.pictureBox_CB.Image = null;
        ////            listViewCB.Items.Clear();
        ////        }

        ////        private void txtReference_BC_Enter(object sender, EventArgs e)
        ////        {
        ////            ClearControls_CB();
        ////        }

        ////        private void txtReference_BC_Leave(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(txtReference_BC.Text))
        ////            {
        ////                return;
        ////            }

        ////            if (string.IsNullOrWhiteSpace(AnyCode) && txtReference_BC.Text.Substring(0, 1) != "A")
        ////            {
        ////                /* MessageBox.Show("Reference is not in the right Format...", "ADMISSION REFERENCE", msgBoxHandler);
        ////                 txtreferenceSU.Text = "";
        ////                 txtreferenceSU.Focus();
        ////                 return; */

        ////                this.txtReference_BC.Text = bissclass.autonumconfig(this.txtReference_BC.Text, true, "A", "999999999");
        ////            }
        ////            //check if reference exist
        ////            AnyCode = Anycode1 = "";
        ////            admrecs = Admrecs.GetADMRECS(txtReference_BC.Text);
        ////            if (admrecs == null) //new defintion
        ////            {
        ////                DialogResult result = MessageBox.Show("Invalid Admission Reference...", "ADMISSION DETAILS");
        ////                txtReference_BC.Text = "";
        ////                txtReference_BC.Select();
        ////                return;
        ////            }
        ////            else
        ////            {
        ////                mgrouphtype = admrecs.GROUPHTYPE;
        ////                txtpatientnoCB.Text = admrecs.PATIENTNO;
        ////                txtgroupcode_BC.Text = admrecs.GROUPCODE;
        ////                txtfacilityCB.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.FACILITY, dtfacility, "name");
        ////                txtnameCB.Text = admrecs.NAME;
        ////                txtoldRateCB.Text = admrecs.RATE.ToString();
        ////                txtroomCB.Text = admrecs.ROOM;
        ////                txtBedCB.Text = admrecs.BED;
        ////                txtdiagosisCB.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.DIAGNOSIS, dtdiag, "name") + " " + admrecs.DIAGNOSIS_ALL.Trim();
        ////                txtadm_dateCB.Text = admrecs.ADM_DATE.ToShortDateString();
        ////                txtdischargedtCB.Text = admrecs.DISCHARGE;
        ////                DateTime xdischarge = string.IsNullOrWhiteSpace(admrecs.DISCHARGE) ? DateTime.Now.Date : Convert.ToDateTime(admrecs.DISCHARGE);
        ////                lbllenghtofStay_CB.Text = xdischarge.Subtract(admrecs.ADM_DATE).TotalDays.ToString() + " day(s)";
        ////                mgrouphead = admrecs.GROUPHEAD;
        ////                bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);
        ////                txtaddressCB.Text = bchain.RESIDENCE;
        ////                edtprofileChangeBed.Text = patientprofile();
        ////                txtgroupheadchangebed.Text = getgrouphead(bchain.GROUPHEAD, bchain.GHGROUPCODE, bchain.GROUPHTYPE);
        ////                if (txtgroupheadchangebed.Text.Trim() == "Abort")
        ////                {
        ////                    txtReference_BC.Focus();
        ////                    return;
        ////                }
        ////                displayPatientPicture(this.pictureBox_CB, bchain.PICLOCATION);
        ////                if (admrecs.DISCHARGE != "")
        ////                {
        ////                    DialogResult result = MessageBox.Show("This Patient has been discharged on " + admrecs.DISCHARGE, admrecs.NAME);
        ////                    txtReference_BC.Text = "";
        ////                    txtReference_BC.Select();
        ////                    return;
        ////                }
        ////                nmrCummAmt_BC.Value = getAccummulatedCharge(admrecs.REFERENCE, admrecs.ACAMT);
        ////                combfacilityCB.Focus();
        ////                return;
        ////            }
        ////        }

        ////        private void combfacilityCB_Leave(object sender, EventArgs e)
        ////        {
        ////            if (combfacilityCB.SelectedValue == null)
        ////                return;

        ////            displaydetails_SpaceDef(combfacilityCB.SelectedValue.ToString(), 5);

        ////            if (listViewCB.Items.Count > 0)
        ////            {
        ////                //store available items to room/bed
        ////                combnewBedCB.Items.Clear();
        ////                combnewRoomCB.Items.Clear();
        ////                for (int i = 0; i < listViewCB.Items.Count; i++)
        ////                {
        ////                    if (listViewCB.Items[i].SubItems[5].ToString().Trim() == "Available")
        ////                    {
        ////                        combnewRoomCB.Items.Add(listViewCB.Items[i].SubItems[2].ToString());
        ////                        combnewBedCB.Items.Add(listViewCB.Items[i].SubItems[3].ToString());
        ////                    }
        ////                }
        ////            }
        ////        }

        ////        private void combnewBedCB_Leave(object sender, EventArgs e)
        ////        {
        ////            bool xfoundit = false;
        ////            if (!string.IsNullOrWhiteSpace(combnewBedCB.Text) || !string.IsNullOrWhiteSpace(combnewRoomCB.Text))
        ////            {
        ////                for (int i = 0; i < listViewCB.Items.Count; i++)
        ////                {
        ////                    if (listViewCB.Items[i].SubItems[2].ToString().Trim() == combnewRoomCB.Text.Trim() &&
        ////                            listViewCB.Items[i].SubItems[3].ToString().Trim() == combnewBedCB.Text.Trim())
        ////                    {
        ////                        if (listViewCB.Items[i].SubItems[5].ToString().Trim() != "Available" &&
        ////                            listViewCB.Items[i].SubItems[5].ToString().Trim() != txtnameCB.Text.Trim())
        ////                        {
        ////                            DialogResult result = MessageBox.Show("Space is occupied by ->" + listViewCB.Items[i].SubItems[5].ToString().Trim(), combfacilityCB.Text);
        ////                            combnewBedCB.Text = combnewRoomCB.Text = "";
        ////                            combnewBedCB.Focus();
        ////                            return;
        ////                        }
        ////                        else if (listViewCB.Items[i].SubItems[5].ToString().Trim() == "Booked" &&
        ////                            Convert.ToDateTime(listViewCB.Items[i].SubItems[5]) < DateTime.Now.Date ||
        ////                            listViewCB.Items[i].SubItems[5].ToString().Trim() == "Available")
        ////                        {
        ////                            xfoundit = true;
        ////                            nmrNewRateCB.Value = Convert.ToDecimal(listViewCB.Items[i].SubItems[4].ToString());
        ////                            nmrNewPNCCB.Value = Convert.ToDecimal(listViewCB.Items[i].SubItems[7].ToString());
        ////                            //txtPncReg.Text = listViewCB.Items[i].SubItems[7].ToString();
        ////                            //5-3-2014 there may be need to update Nursing Care and other associated cost for the new room ??
        ////                        }
        ////                    }
        ////                }

        ////                if (!xfoundit)
        ////                {
        ////                    DialogResult result = MessageBox.Show("Invalid Bed Space Selections");
        ////                    combnewBedCB.Text = combnewRoomCB.Text = "";
        ////                    combnewBedCB.Focus();
        ////                    return;
        ////                }

        ////                btnSubmitCB.Enabled = true;
        ////            }
        ////        }


        public MR_DATA.REPORTS btnSubmitCB_Click()
        {
            ////DialogResult result;
            //if (combfacilityCB.Text.Trim() == txtfacilityCB.Text.Trim() && txtroomCB.Text.Trim() == combnewRoomCB.Text.Trim() &&
            //    txtBedCB.Text.Trim() == combnewBedCB.Text.Trim() || string.IsNullOrWhiteSpace(txtroomCB.Text) || string.IsNullOrWhiteSpace(combnewRoomCB.Text) || string.IsNullOrWhiteSpace(combnewBedCB.Text))
            //{
            //    result = MessageBox.Show("NO CHANGE...", "Change Bed Space");
            //    txtReference_BC.Text = "";
            //    txtReference_BC.Focus();
            //    return;
            //}

            //DialogResult result1 = MessageBox.Show("Confirm to Save Records...", "ROOM CHANGE", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
            //if (result1 == DialogResult.No)
            //    return;

            submitCB_Details();

            return vm.REPORTS;
        }

        void submitCB_Details()
        {
            var transDate = Convert.ToDateTime(vm.REPORTS.txtworkphone);
            admrecs = Admrecs.GetADMRECS(vm.REPORTS.txtreference);
            bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);

            // txtFeedingReg.Text = (string.IsNullOrWhiteSpace(txtFeedingReg.Text)) ? "0" : txtFeedingReg.Text;
            // txtNursingCare.Text = (string.IsNullOrWhiteSpace(txtNursingCare.Text)) ? "0" : txtNursingCare.Text;
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand insertCommand = new SqlCommand();
            insertCommand.CommandText = "Admrecs_ChangeBed";
            insertCommand.Connection = connection;
            insertCommand.CommandType = CommandType.StoredProcedure;

            insertCommand.Parameters.AddWithValue("@reference", vm.REPORTS.txtreference);
            insertCommand.Parameters.AddWithValue("@facility", vm.REPORTS.combFacility);
            insertCommand.Parameters.AddWithValue("@room", vm.REPORTS.txtRoom);
            insertCommand.Parameters.AddWithValue("@bed", vm.REPORTS.txtBed);
            insertCommand.Parameters.AddWithValue("@rate", vm.REPORTS.txtcurrency);

            try
            {
                connection.Open();
                insertCommand.ExecuteNonQuery();
            }
            catch (SqlException ex)
            {
                vm.REPORTS.alertMessage = "Change Bed Space " + ex;
                return;
            }
            finally
            {
                connection.Close();
            }

            ADMSPACE.UpdateAdmOccupant(vm.REPORTS.combFacility, vm.REPORTS.TXTPATIENTNAME, vm.REPORTS.txtRoom, vm.REPORTS.txtBed, DateTime.Now.Date);
            //release old space
            ADMSPACE.UpdateAdmOccupant(vm.REPORTS.combFacility, "", vm.REPORTS.REPORT_TYPE1, vm.REPORTS.REPORT_TYPE2, DateTime.Now.Date);
            
            // updatemedhist
            string xcomments =
                    "==> Admissions - Room/Bed Change  @" + DateTime.Now.ToShortTimeString() +
                    " Date Admitted : " + admrecs.ADM_DATE.ToString() + " : Diag : " + admrecs.DIAGNOSIS_ALL + "'\r\n'" +
                    " From : " + vm.REPORTS.REPORT_TYPE1 + " Bed : " + vm.REPORTS.REPORT_TYPE2 + "'\r\n'" +
                    " To   : " + vm.REPORTS.txtRoom + " Bed : " + vm.REPORTS.txtBed;

            updatemedhist(xcomments, transDate.Date, bchain, admrecs.REFERENCE, "");

            //check if lastbilled is more than 24 hrs and that oldrate is not same with rate of current space
            //COMMENTED 21.06.2019 - ITS CREATING PROBLEMS OF ITS OWN
            /*   if (admrecs.DATE_BILLE >= dtmin_date.Date &&
                   Convert.ToInt32( dttrans_dateCB.Value.Date.Subtract(admrecs.DATE_BILLE).TotalDays) >= 1 && Convert.ToDecimal(txtoldRateCB.Text) != nmrNewRateCB.Value)
               {
                   string mdesc = "Accommodation | "+txtroomCB.Text.Trim()+","+txtBedCB.Text.Trim()+
                       " ("+admrecs.DATE_BILLE.ToString("dd.MM.yyyy")+"-"+dttrans_dateCB.Value.Date.ToString("dd.MM.yyyy")+")";
                   //raise a bill
                   decimal day_save = Convert.ToInt32( dttrans_dateCB.Value.Date.Subtract(admrecs.DATE_BILLE).TotalDays);
                   string amount_to_bill = (day_save <= 1m ) ? txtoldRateCB.Text : (Convert.ToDecimal(txtoldRateCB.Text) * day_save).ToString();

                   DialogResult result = MessageBox.Show( "Raise A Bill on Previous Space...?","On Change of Bed Space", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
                   if (result == DialogResult.Yes)
                   {
                       ADMDETAI.writeAdmdetails(true, txtReference_BC.Text, DateTime.Now.Date, DateTime.Now.ToShortTimeString(), acc_code, acc_code, "", mdesc, "", (day_save < 1m) ? 1m : day_save, Convert.ToDecimal(amount_to_bill), false, dtmin_date, woperator, DateTime.Now, bchain.GROUPCODE, bchain.PATIENTNO, "", combfacilityCB.Text, 0,"");

                       Admrecs.UpdateAdmrecAmounts(txtReference_BC.Text, Convert.ToDecimal(amount_to_bill), 0m);
                   }
               }*/

            vm.REPORTS.ActRslt = "Done...";
            //txtReference_BC.Text = "";
            //txtReference_BC.Focus();

            return;
        }

        //        //discharge
        ////        void ClearControls_D()
        ////        {
        ////            txtgroupcode_D.Text = txtpatientnoD.Text = txtFacilityD.Text = txtNameD.Text = txtroomD.Text = txtBedD.Text = txtdiagnosisD.Text = txtgroupheaD.Text = txtaddressD.Text = txttimeD.Text = combDschgDoc.Text = cboDischargeReason.Text = txtDschgCommt.Text = txtlastbilldate_D.Text = lbllenghtofStay_D.Text = "";
        ////            cboRaiseBill_D.Text = "YES";
        ////            dttrans_dateD.Value = DateTime.Now.Date;
        ////            nmrAccumCharge_D.Value = nmrProfCharge_D.Value = 0m;
        ////            this.pictureBox_Discharge.Image = null;
        ////        }

        ////        private void txtReference_D_Enter(object sender, EventArgs e)
        ////        {
        ////            ClearControls_D();
        ////        }

        ////        private void txtReference_D_LostFocus(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(txtReference_D.Text))
        ////                return;
        ////            if (string.IsNullOrWhiteSpace(AnyCode) && txtReference_D.Text.Substring(0, 1) != "A" && bissclass.IsDigitsOnly(txtReference_D.Text.Trim()))
        ////            {
        ////                this.txtReference_D.Text = bissclass.autonumconfig(this.txtReference_D.Text, true, "A", "999999999");
        ////            }
        ////            //check if reference exist
        ////            AnyCode = Anycode1 = "";
        ////            admrecs = Admrecs.GetADMRECS(txtReference_D.Text);
        ////            if (admrecs == null)
        ////            {
        ////                DialogResult result = MessageBox.Show("Invalid Admission Reference...", "ADMISSION DETAILS");
        ////                txtReference_D.Text = "";
        ////                txtReference_D.Select();
        ////                return;
        ////            }
        ////            else
        ////            {
        ////                mgrouphtype = admrecs.GROUPHTYPE;
        ////                txtpatientnoD.Text = admrecs.PATIENTNO;
        ////                txtgroupcode_D.Text = admrecs.GROUPCODE;
        ////                txtFacilityD.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.FACILITY, dtfacility, "name");
        ////                txtNameD.Text = admrecs.NAME;
        ////                txtroomD.Text = admrecs.ROOM;
        ////                txtBedD.Text = admrecs.BED;
        ////                txtdiagnosisD.Text = bissclass.combodisplayitemCodeName("type_code", admrecs.DIAGNOSIS, dtdiag, "name") + " " + admrecs.DIAGNOSIS_ALL.Trim();
        ////                txtadm_dateD.Text = admrecs.ADM_DATE.ToShortDateString();
        ////                txtdischargedtD.Text = admrecs.DISCHARGE;
        ////                DateTime xdischarge = string.IsNullOrWhiteSpace(admrecs.DISCHARGE) ? DateTime.Now.Date : Convert.ToDateTime(admrecs.DISCHARGE);
        ////                lbllenghtofStay_D.Text = xdischarge.Subtract(admrecs.ADM_DATE).TotalDays.ToString() + " day(s)";
        ////                mgrouphead = admrecs.GROUPHEAD;
        ////                //  nmrAccumCharge_D.Value = admrecs.ACAMT;
        ////                nmrAccumCharge_D.Value = getAccummulatedCharge(admrecs.REFERENCE, admrecs.ACAMT);
        ////                cboRaiseBill_D.SelectedItem = "YES";
        ////                bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);
        ////                txtaddressD.Text = bchain.RESIDENCE;
        ////                edtprofileD.Text = patientprofile();
        ////                txtgroupheaD.Text = getgrouphead(bchain.GROUPHEAD, bchain.GHGROUPCODE, bchain.GROUPHTYPE);
        ////                if (txtgroupheaD.Text.Trim() == "Abort")
        ////                {
        ////                    txtReference_D.Focus();
        ////                    return;
        ////                }
        ////                displayPatientPicture(this.pictureBox_Discharge, bchain.PICLOCATION);
        ////                if (!string.IsNullOrWhiteSpace(admrecs.DISCHARGE))
        ////                {
        ////                    DialogResult result = MessageBox.Show("This Patient has been discharged on " + admrecs.DISCHARGE, admrecs.NAME);
        ////                    txtReference_D.Text = "";
        ////                    txtReference_D.Select();
        ////                    return;
        ////                }
        ////                dttrans_dateD.Focus();
        ////                return;
        ////            }
        ////        }

        ////        decimal getAccummulatedCharge(string xreference, decimal oldamt)
        ////        {
        ////            DataTable dt = Dataaccess.GetAnytable("", "MR", "select sum(amount) as amount from admdetai where reference = '" + xreference + "'", false);
        ////            if (dt.Rows.Count < 1)
        ////                return 0m;
        ////            if (Convert.ToDecimal(dt.Rows[0]["amount"]) != oldamt)
        ////            {
        ////                string updstr = "update admrecs set acamt = '" + Convert.ToDecimal(dt.Rows[0]["amount"]) + "' where reference = '" + xreference + "'";
        ////                bissclass.UpdateRecords(updstr, "MR");
        ////            }
        ////            return Convert.ToDecimal(dt.Rows[0]["amount"]);
        ////        }

        ////        private void dttrans_dateD_LostFocus(object sender, EventArgs e)
        ////        {
        ////            if (dttrans_dateD.Value.Date > DateTime.Now.Date || dttrans_dateCB.Value.Date < admrecs.ADM_DATE)
        ////            {
        ////                DialogResult result = MessageBox.Show("Invalid date...", "Discharge date");
        ////                dttrans_dateD.Value = DateTime.Now.Date;
        ////                txtReference_D.Text = "";
        ////                txtReference_D.Focus();
        ////                return;
        ////            }
        ////            txttimeD.Text = DateTime.Now.ToShortTimeString();
        ////            if (mcalc_prof_fees)
        ////                calc_prof_fees(false);
        ////        }

        void calc_prof_fees(bool iswrite)
        {
            // string mgldocument,mdtformat;
            string masterprocessbillcode, billcode;
            decimal percentagemarkup = 0m;
            DataTable dt = Dataaccess.GetAnytable("", "MR", "SELECT gldocument, fccode, paediacons, dtformat from mrcontrol order by recid", false);

            masterprocessbillcode = dt.Rows[6]["gldocument"].ToString().Length > 6 ? dt.Rows[6]["gldocument"].ToString().Substring(0, 7) : "";// master process
                                                                                                                                              //17/09/2011 - 12.15AM, 6-3-2014 - CHECK PATIENT GROUP AND % TO ADD
            if (bchain.GROUPHTYPE == "P")
                percentagemarkup = (decimal)dt.Rows[6]["paediacons"];

            billcode = dt.Rows[6]["dtformat"].ToString().Length > 6 ? dt.Rows[6]["dtformat"].ToString().Substring(0, 7) : "";
            //  encryptedaccesscode = dt.Rows[1]["fccode"].ToString();
            //check if specific corporate has defined %

            if (bchain.GROUPHTYPE == "C" && customers.MAX_ORD_AM > 0)
                percentagemarkup = customers.MAX_ORD_AM;
            else if (bchain.GROUPHTYPE == "C" && string.IsNullOrWhiteSpace(bchain.HMOSERVTYPE))
                percentagemarkup = (decimal)dt.Rows[0]["paediacons"];
            else if (bchain.GROUPHTYPE == "C" && !string.IsNullOrWhiteSpace(bchain.HMOSERVTYPE))
                percentagemarkup = (decimal)dt.Rows[1]["paediacons"];

            decimal xamt = vm.REPORTS.txtdiscount; //nmrAccumCharge_D.Value;
            vm.REPORTS.nmrPayable = (xamt * percentagemarkup) / 100; //nmrProfCharge_D.Value
            vm.REPORTS.cbotitle = percentagemarkup.ToString("N2") + " %"; //lblproffees.Text

            if (!iswrite)
                return;

            string mdesc = "", xfacility = ""; // bissclass.seeksay("select name from tariff where reference = '" + billcode + "'", "MR", "NAME");

            msmrfunc.getFeefromtariff(billcode, bchain.PATCATEG, ref mdesc, ref xfacility);
            //write to admdetail
            ADMDETAI.writeAdmdetails(true, vm.REPORTS.txtreference, DateTime.Now.Date, DateTime.Now.ToShortTimeString(), 
                billcode, masterprocessbillcode, "", mdesc, "", 1m, vm.REPORTS.nmrPayable, false, dtmin_date, woperator,
                DateTime.Now, bchain.GROUPCODE, bchain.PATIENTNO, "", xfacility, 0, "");

            Admrecs.UpdateAdmrecAmounts(vm.REPORTS.txtreference, vm.REPORTS.nmrPayable, 0m);
        }

        public MR_DATA.REPORTS btnSubmitD_Click()
        {
            //DialogResult result;
            //if (string.IsNullOrWhiteSpace(combDschgDoc.Text) || string.IsNullOrWhiteSpace(cboDischargeReason.Text))
            //{
            //    result = MessageBox.Show("Discharging Doctor and Nurse must be specified...", "");
            //    combDschgDoc.Focus();
            //    return;
            //}
            //result = MessageBox.Show("Confirm to Submit Details...", "DISCHARGE RECORDS", MessageBoxButtons.YesNoCancel,
            //        MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
            //if (result == DialogResult.No)
            //    return;

            submitDischargeDetails();

            return vm.REPORTS;
        }

        void submitDischargeDetails()
        {
            //check if reference exist
            admrecs = Admrecs.GetADMRECS(vm.REPORTS.txtreference);
            bchain = billchaindtl.Getbillchain(admrecs.PATIENTNO, admrecs.GROUPCODE);

            DateTime transDate = Convert.ToDateTime(vm.REPORTS.cbogenotype);

            if (mcalc_prof_fees)
                calc_prof_fees(true);

            //btnSubmitD.Enabled = false;
            vm.REPORTS.chkApplyFilter = false;

            /*       Admrecs.UpdateDischarge(txtReference_D.Text, dttrans_dateD.Value.ToShortDateString(), txttimeD.Text, combDschgDoc.SelectedValue.ToString(), (cboRaiseBill_D.Text == "YES") ? true : false, dttrans_dateD.Value.Date, txtDschgCommt.Text.Trim());*/
            string xbilled = vm.REPORTS.txtworkphone == "YES" ? "1" : "0";
            string updatestr = "update admrecs set discharge = '" + transDate.ToShortDateString() + "', disch_time = '" + 
                vm.REPORTS.cbokinstate + "', disch_doct = '" + vm.REPORTS.doctor + "', billed = '" + xbilled + "', date_bille = '" + 
                transDate + "', remarks = '" + vm.REPORTS.edtallergies + "' where reference = '" + vm.REPORTS.txtreference + "'";

            bissclass.UpdateRecords(updatestr, "MR");
            
            //update space
            ADMSPACE.UpdateAdmOccupant(admrecs.FACILITY, "", vm.REPORTS.txtRoom, vm.REPORTS.txtBed, DateTime.Now.Date);
            //btnDeathrecord.Enabled = true;

            string markupbillcode;
            decimal mautoapptmt, mdrgmarkup;
            bool isautoapptmt;
            DataTable dt = Dataaccess.GetAnytable("", "MR", "select gldocument, ecgno, facilauto, tp_period from mrcontrol order by recid", false);

            markupbillcode = dt.Rows[1]["gldocument"].ToString().Substring(0, 7);
            mdrgmarkup = (decimal)dt.Rows[2]["ecgno"];
            isautoapptmt = (bool)dt.Rows[4]["facilauto"];
            mautoapptmt = (decimal)dt.Rows[4]["tp_period"];
            MedHist medhist = MedHist.GetMEDHIST(bchain.GROUPCODE, bchain.PATIENTNO, "", false, true, transDate.Date, "DESC");
            bool newhist = (medhist == null) ? true : false;
            string xstring = (vm.REPORTS.txtworkphone == "NO") ? "NoBill On Discharge" : "Billed On Discharge : ";

            string xcomments = "DISCHARGE RECORD : \r\n" + transDate.ToShortDateString() + " - " + vm.REPORTS.cbokinstate + " : " +
                "DOC : " + vm.REPORTS.doctor + " " + xstring + vm.REPORTS.txtdiscount + "\r\n" + vm.REPORTS.edtallergies + "\r\n";

            updatemedhist(xcomments, transDate.Date, bchain, admrecs.REFERENCE, mdoctor);

            //ALERT TO BILLING AND CASHIER 16-08-2015 capitolhill wants alerts
            string xnotes = "DISCHARGE NOTIFICATION @ " + vm.REPORTS.combFacility + ":" + vm.REPORTS.txtRoom + ":" + 
                vm.REPORTS.txtBed + ":" + vm.REPORTS.txtreference.Trim();

            for (int i = 0; i < 2; i++)
            {
                //MRB21a.WriteAlertDetails(bchain.NAME, woperator, DateTime.Now, xnotes, "", msection, false, i == 0 ? "2" : "7", 0m, 0m, false);

                MRB21.Writemrb21Details(bchain.GROUPCODE, bchain.PATIENTNO, DateTime.Now, bchain.NAME, vm.REPORTS.combFacility, woperator,
                    xnotes, vm.REPORTS.txtreference, msection, i == 0 ? "2" : "7", woperator, vm.REPORTS.doctor, "I");
            }
            //check for auto appointment on discharge

            if (isautoapptmt && mautoapptmt >= 1)
            {
                DataTable docdt = Dataaccess.GetAnytable("", "MR", "select phone, email from doctors where reference = '" + vm.REPORTS.doctor + "'", false);
                string xcm = "Auto Appointment on Discharge - " + admrecs.NAME + " [" + admrecs.GROUPCODE.Trim() + ":" + admrecs.PATIENTNO.Trim() + "]";
                string[] schpara_ = new string[8]; schpara_[0] = vm.REPORTS.doctor; schpara_[1] = xcm; schpara_[2] = "FOLLOW-UP ON DISCHARGE";
                schpara_[3] = docdt.Rows.Count < 1 ? "" : docdt.Rows[0]["phone"].ToString(); schpara_[4] = docdt.Rows.Count < 1 ? "" : 
                    docdt.Rows[0]["email"].ToString(); schpara_[5] = admrecs.NAME; schpara_[6] = bchain.PHONE;
                schpara_[7] = bchain.EMAIL;
                string T = transDate.AddDays(Convert.ToDouble(mautoapptmt)).ToShortDateString();
                T = T + " 10:00:00";
                DateTime ts = Convert.ToDateTime(T);
                APPT.writeApptment(true, ts, DateTime.Now.ToLongTimeString(), ts.AddMinutes(30).ToLongDateString(), admrecs.FACILITY, "", "", "", false, schpara_);
            }

            //update billing file
            string xprocess = "";
            decimal xamt = 0m, amtsave = 0m; ;
            msmrfunc.mrGlobals.waitwindowtext = "Updating Billing File...";
            //pleaseWait.Show();
            //accummulate amount by mastprocess
            string selstr = "select sum(amount) as amount, mastprocess from admdetai where reference = '" + vm.REPORTS.txtreference + "' group by mastprocess";
            DataTable dts = Dataaccess.GetAnytable("", "MR", selstr, false);

            for (int i = 0; i < dts.Rows.Count; i++) // update billings
            {
                xprocess = dts.Rows[i]["mastprocess"].ToString();
                xamt = Convert.ToDecimal(dts.Rows[i]["Amount"]);

                if (xprocess == markupbillcode && mdrgmarkup > 0)
                    xamt += mdrgmarkup;

                amtsave += xamt;
                writeBILLS(true, vm.REPORTS.txtreference, i + 1, xprocess, getdefinedprocess(xprocess), bchain.GROUPHTYPE, xamt, 
                    transDate.Date, bchain.NAME, bchain.GROUPHEAD, admrecs.FACILITY, bchain.GROUPCODE, bchain.PATIENTNO, "D", bchain.GHGROUPCODE, 
                    woperator, DateTime.Now, "", "", 0m, 0, admrecs.DIAGNOSIS, "", false, "", "C", 0m, "", 0m, "O", false, 0);
            }

            // Admrecs.UpdateAdmrecAmounts(txtReference_D.Text, amtsave, 0m);
            updatestr = "UPDATE ADMRECS set ACAMT = '" + amtsave + "' WHERE REFERENCE = '" + vm.REPORTS.txtreference + "'";
            bissclass.UpdateRecords(updatestr, "MR");
            pleaseWait.Hide();

            vm.REPORTS.alertMessage = "Completed...";

            vm.REPORTS.chkApplyFilter = false;
            //btnDeathrecord.Enabled = btnSubmitD.Enabled = false;
            //txtReference_D.Focus();
            return;
        }

        private void writeBILLS(bool xnewrec, string xreference, decimal xitem, string xprocess, string xdescription, string xgrouphtype, decimal xamount,
            DateTime xdate, string xname, string xgrouphead, string xfacility, string xgroupcode, string xpatientno, string debitcredit_CD, string xghgroupcod,
            string xoperator, DateTime xop_time, string xextdesc, string xcurrency, decimal xexrate, int xfxtype, string xdiag, string xdoctor, bool xposted,
            string xpayref, string xservicetyp, decimal xpayment, string xpaytype, decimal xfcamount, string in_outpatient, bool receipted, int recid)
        {
            //DateTime dtmin_date = msmrfunc.mrGlobals.mta_start;
            DateTime dtmin_date = DateTime.Now;
            SqlConnection connection = new SqlConnection(); connection = Dataaccess.mrConnection();
            SqlCommand insertCommand = new SqlCommand();
            insertCommand.CommandText = (xservicetyp == "b") ? "capbills_Add" : (xnewrec) ? "Billing_Add" : "Billing_Update";
            insertCommand.Connection = connection;
            insertCommand.CommandType = CommandType.StoredProcedure;

            insertCommand.Parameters.AddWithValue("@Reference", xreference);
            insertCommand.Parameters.AddWithValue("@patientno", xpatientno);
            insertCommand.Parameters.AddWithValue("@name", xname);
            insertCommand.Parameters.AddWithValue("@Itemno", xitem);
            insertCommand.Parameters.AddWithValue("@diag", xdiag);
            insertCommand.Parameters.AddWithValue("@process", xprocess);
            insertCommand.Parameters.AddWithValue("@description", xdescription);
            insertCommand.Parameters.AddWithValue("@doctor", xdoctor);
            insertCommand.Parameters.AddWithValue("@facility", xfacility);
            insertCommand.Parameters.AddWithValue("@amount", xamount);
            insertCommand.Parameters.AddWithValue("@trans_date", xdate);
            insertCommand.Parameters.AddWithValue("@sec_level", 0m);
            insertCommand.Parameters.AddWithValue("@posted", (xnewrec) ? false : xposted);
            insertCommand.Parameters.AddWithValue("@post_date", dtmin_date);
            insertCommand.Parameters.AddWithValue("@receipted", receipted);
            insertCommand.Parameters.AddWithValue("@transtype", xgrouphtype);
            insertCommand.Parameters.AddWithValue("@payref", xpayref);
            insertCommand.Parameters.AddWithValue("@grouphead", xgrouphead);
            insertCommand.Parameters.AddWithValue("@servicetype", xservicetyp);
            insertCommand.Parameters.AddWithValue("@payment", xpayment);
            insertCommand.Parameters.AddWithValue("@groupcode", xgroupcode);
            insertCommand.Parameters.AddWithValue("@ttype", debitcredit_CD);
            insertCommand.Parameters.AddWithValue("@ghgroupcode", xghgroupcod);
            insertCommand.Parameters.AddWithValue("@operator", xoperator);
            insertCommand.Parameters.AddWithValue("@op_time", xop_time);
            insertCommand.Parameters.AddWithValue("@currency", xcurrency);
            insertCommand.Parameters.AddWithValue("@exrate", xexrate);
            insertCommand.Parameters.AddWithValue("@fcamount", xfcamount);
            insertCommand.Parameters.AddWithValue("@extdesc", xextdesc);
            insertCommand.Parameters.AddWithValue("@Accounttype", xservicetyp); // in_outpatient);

            if (!xnewrec)
                insertCommand.Parameters.AddWithValue("@RECID", recid);
            try
            {
                connection.Open();
                insertCommand.ExecuteNonQuery();
                //return true;

            }
            catch (SqlException ex)
            {
                // throw ex;
                vm.REPORTS.ActRslt = "SQL access" + ex;
                return;
            }
            finally
            {
                connection.Close();
            }

        }



        ////        private void btnPrintServLgr_Click(object sender, EventArgs e)
        ////        {
        ////            frmInPatientStatement inpstatmt = new frmInPatientStatement(mreference);
        ////            inpstatmt.Show();
        ////        }

        ////        private void btnTreatmtCht_Click(object sender, EventArgs e)
        ////        {
        ////            if (admrecs == null || admrecs.PATIENTNO == null)
        ////            {
        ////                MessageBox.Show("A patient admission record must be specified...", "In-Patient treatment chart");
        ////                return;
        ////            }
        ////            timer_Adm.Enabled = false; // .Stop();
        ////            frmTreatmentChartNew treatmtchart = new frmTreatmentChartNew(admrecs, woperator, mcandelete, mcanalter, pharmacyStore, InpatientDispenseAtPharmacy, bchain.PICLOCATION);
        ////            treatmtchart.Show();
        ////        }

        //        private void btnDiag_Click(object sender, EventArgs e)
        //        {
        //            //if (string.IsNullOrWhiteSpace(admrecs.))
        //            string xstring = !string.IsNullOrWhiteSpace(diagnosis) ? diagnosis : admrecs != null ? admrecs.DIAGNOSIS_ALL : "";
        //            NOTES frmnotes = new NOTES("Other Diagnosis - Define Freely", "", xstring, false);
        //            frmnotes.Closed += new EventHandler(notes_Closed);
        //            frmnotes.ShowDialog();
        //        }

        //        private void notes_Closed(object sender, EventArgs e)
        //        {
        //            NOTES frmnotes = sender as NOTES;
        //            //  admrecs.DIAGNOSIS_ALL = msmrfunc.mrGlobals.rtnstringNotes;
        //            diagnosis = msmrfunc.mrGlobals.rtnstringNotes;
        //        }

        ////        private void dttrans_dateCB_Leave(object sender, EventArgs e)
        ////        {
        ////            if (dttrans_dateCB.Value > DateTime.Now.Date)
        ////            {
        ////                DialogResult result = MessageBox.Show("Invalid Date specification...");
        ////                dttrans_dateCB.Value = DateTime.Now.Date;
        ////                dttrans_dateCB.Focus();
        ////                return;
        ////            }
        ////            txttimeCB.Text = DateTime.Now.ToShortTimeString();
        ////        }

        //        private void timer1_Tick(object sender, EventArgs e)
        //        {
        //            if (DateTime.Now.Hour >= 13 && !isautoGenerated) //do nothing too early
        //            {

        //                TimerProcess();
        //                isautoGenerated = true;
        //            }
        //            Timer1Execute();
        //        }

        ////        void TimerProcess()
        ////        {
        ////            /*note 1000 = 1 second
        //            //    1 min = 1000x60 = 60000
        //            //    5 min = 60000x5 = 300000
        //            //    30 min = 1800000
        //            //    1 hr = 60000x60 = 3600000*/

        ////            if (mautoaccommodation || mautofeeding || mautopnc)
        ////            {
        ////                DataTable dt = Dataaccess.GetAnytable("", "MR", "select reference, rate, dailyfeeding, dailypnc, groupcode, patientno, facility from admrecs where discharge = '' and date_bille < '" + DateTime.Now.ToShortDateString() + "'", false);
        ////                if (dt.Rows.Count < 1)
        ////                    return;
        ////                timer_Adm.Enabled = false;
        ////                // int xcount = 0;
        ////                DataTable dtc = Dataaccess.GetAnytable("", "MR", "SELECT REGCODE, conscode from mrcontrol where recid = '8'", false);
        ////                foreach (DataRow row in dt.Rows)
        ////                {
        ////                    if (mautoaccommodation && (decimal)row["rate"] > 0)
        ////                        AutogenerateCharge("A", row, dtc.Rows[0]);
        ////                    if (mautofeeding && (decimal)row["dailyfeeding"] > 0)
        ////                        AutogenerateCharge("F", row, dtc.Rows[0]);
        ////                    if (mautopnc && (decimal)row["dailypnc"] > 0)
        ////                        AutogenerateCharge("P", row, dtc.Rows[0]);
        ////                    string updatestr = "update admrecs set date_bille = '" + DateTime.Now.Date + "' where reference = '" + row["REFERENCE"].ToString() + "'";
        ////                    bissclass.UpdateRecords(updatestr, "MR");
        ////                }
        ////                DialogResult result = MessageBox.Show("Completed for " + dt.Rows.Count.ToString() + " In-Patient(s) ", "Auto Generate Inpatient Charges");
        ////                timer_Adm.Enabled = true;
        ////            }
        ////            return;
        ////        }

        ////        void AutogenerateCharge(string xtype, DataRow xrow, DataRow xrow1)
        ////        {
        ////            string mbillcode = "";
        ////            decimal xamt = 0m;
        ////            if (xtype == "A") //accommodation
        ////            {
        ////                mbillcode = acc_code;
        ////                xamt = (decimal)xrow["rate"];
        ////            }
        ////            else if (xtype == "F")
        ////            {
        ////                mbillcode = xrow1["regcode"].ToString();
        ////                xamt = (decimal)xrow["dailyfeeding"];
        ////            }
        ////            else
        ////            {
        ////                mbillcode = xrow1["conscode"].ToString();
        ////                xamt = (decimal)xrow["dailypnc"];
        ////            }
        ////            //check, just in case nurses had raised bill manually before now
        ////            DataTable dt = Dataaccess.GetAnytable("", "MR", "SELECT reference from admdetai where reference = '" + xrow["reference"].ToString() + "' and trans_date = '" + DateTime.Now.ToShortDateString() + "' and process = '" + mbillcode + "'", false);
        ////            if (dt.Rows.Count > 0)
        ////                return;
        ////            string masterprocess, xds; masterprocess = xds = "";
        ////            foreach (DataRow row in dispserv.Rows)
        ////            {
        ////                if (xtype == "A" && row["description"].ToString().Contains("ACCOMMODATION") ||
        ////                    xtype == "F" && row["description"].ToString().Contains("FEEDING") ||
        ////                    xtype == "P" && row["description"].ToString().Contains("NURSING") ||
        ////                    xtype == "P" && row["description"].ToString().Contains("PROF"))
        ////                {
        ////                    xds = row["description"].ToString();
        ////                    masterprocess = row["reference"].ToString();
        ////                    break;
        ////                }

        ////            }
        ////            dt = Dataaccess.GetAnytable("", "MR", "select name from tariff where reference = '" + mbillcode + "'", false);
        ////            if (dt.Rows.Count > 0)
        ////                xds = dt.Rows[0]["name"].ToString();
        ////            ADMDETAI.writeAdmdetails(true, xrow["reference"].ToString(), DateTime.Now.Date, DateTime.Now.ToLongTimeString(), mbillcode, masterprocess, "", xds, "", 0m, xamt, false, DateTime.Now, woperator, DateTime.Now, xrow["groupcode"].ToString(), xrow["patientno"].ToString(), "", xrow["facility"].ToString(), 0, "");

        ////            /* xds = "update admrecs set posted = '1', acamt = acamt + '" + xamt + "', date_bille = '"+DateTime.Now.Date+"' where reference = '" + xrow["reference"].ToString();
        ////             bissclass.UpdateRecords(xds, "MR");*/
        ////            Admrecs.UpdateAdmrecAmounts(xrow["reference"].ToString(), xamt, 0m);

        ////        }

        //        private void btnDeathrecord_Click(object sender, EventArgs e)
        //        {
        //            billchaindtl dt = new billchaindtl();
        //            frmDeaths deaths = new frmDeaths(dt, true, woperator);
        //            deaths.Show();
        //        }

        ////        private void nmrDailyRateReg_Enter(object sender, EventArgs e)
        ////        {
        ////            NumericUpDown nt = sender as NumericUpDown;
        ////            nt.Select(0, nt.Text.Length);
        ////        }

        ////        private void btnAutoGenerate_Click(object sender, EventArgs e)
        ////        {
        ////            DialogResult result = MessageBox.Show("Confirm to Check Auto-Generatable items on Admissions Management", "Auto-Generate Services...", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        ////            if (result == DialogResult.No)
        ////                return;
        ////            TimerProcess();
        ////        }

        ////        private void listView2_DoubleClick(object sender, EventArgs e)
        ////        {
        ////            DialogResult result;
        ////            if (string.IsNullOrWhiteSpace(txtreferenceReg.Text) || string.IsNullOrWhiteSpace(txtgroupcode_Reg.Text) || string.IsNullOrWhiteSpace(txtPatNoReg.Text) || string.IsNullOrWhiteSpace(combFacilityreg.Text))
        ////            {
        ////                result = MessageBox.Show("Admission Ref./Patient/Facility must be selected...");
        ////                return;
        ////            }
        ////            if (listView2.SelectedItems.Count < 1)
        ////                return;
        ////            ListViewItem lv = listView2.SelectedItems[0];
        ////            if (lv.SubItems[5].Text.Trim() != "Available")
        ////            {
        ////                result = MessageBox.Show("Selected Space is occupied by " + lv.SubItems[5].Text.Trim(), "Admission Space");
        ////                return;
        ////            }
        ////            result = MessageBox.Show("Confirm To Assign Patient to Room :" + lv.SubItems[2].Text.Trim() + "  Bed : " + lv.SubItems[3].Text.Trim(), "Admission Registration", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        ////            if (result == DialogResult.No)
        ////                return;
        ////            combRmWdReg.Text = lv.SubItems[2].Text;
        ////            combBedReg.Text = lv.SubItems[3].Text;
        ////            combRmWdReg.Focus();
        ////        }

        ////        private void listViewSI_DoubleClick(object sender, EventArgs e)
        ////        {
        ////            //if (listViewSI.SelectedItems.Count > 0)
        ////            // {
        ////            recno = listViewSI.SelectedIndex;
        ////            bissclass.displaycombo(combprocedureSI, dttariff, listViewSI.Items[recno].SubItems[1].Text, "reference");
        ////            txtdescriptionSI.Text = listViewSI.Items[recno].SubItems[0].Text;
        ////            btnDeleteSI.Enabled = btnAddSI.Enabled = true;
        ////            newrec = false;
        ////            return;
        ////            // }
        ////        }

        ////private void Timer1Execute()
        ////{
        ////    timer_Adm.Stop();
        ////    DataRow row = msmrfunc.TimerExecute(msection, woperator, 1);
        ////    if (row != null)
        ////    {
        ////        using (MSMR.Forms.frmAlert fa = new MSMR.Forms.frmAlert(row, "ALERT", "MRB21", false))
        ////            fa.ShowDialog();
        ////    }
        ////    row = msmrfunc.TimerExecute(msection, woperator, 2);
        ////    if (row != null)
        ////    {
        ////        SMSAlert lt = new SMSAlert(row, woperator);
        ////        lt.ShowDialog();
        ////    }
        ////}

        ////        private void txtcurrentrecs_Enter(object sender, EventArgs e)
        ////        {
        ////            //if (timer_Adm.Enabled)
        ////            //    timer_Adm.Stop();
        ////            timer_Adm.Enabled = timer_Doc.Enabled = false;
        ////        }

        ////        private void btnGetHistory_Click(object sender, EventArgs e)
        ////        {
        ////            if ((dtHistoryDateto.Value - dtHistoryDatefrom.Value).TotalDays > 190)
        ////            {
        ////                DialogResult result = MessageBox.Show("Medical History Query Date Range is too wide...");
        ////                return;
        ////            }

        ////            medhistryRev(false);
        ////        }

        //        private void txtTimeTrtmtRev_Click(object sender, EventArgs e)
        //        {
        //            ExitReviewDate();
        //        }

        //        private void chkFullScreen_Click(object sender, EventArgs e)
        //        {
        //            if (!string.IsNullOrWhiteSpace(txtPic1.Text))
        //            {
        //                frmImageView imagev = new frmImageView(txtPic1.Text);
        //                imagev.Show();
        //            }
        //            //if (!string.IsNullOrWhiteSpace( txtPic1.Text))
        //            //    Process.Start(txtPic1.Text); //APP,USER,PASSWD,DOMAIN
        //        }
        //        private void listView_Images_MouseClick(object sender, MouseEventArgs e)
        //        {
        //            // MessageBox.Show("Mouse Click");
        //            ListViewItem lv = new ListViewItem();
        //            if (listView_Image.SelectedItems.Count > 0)
        //            {
        //                lvitemselect = listView_Image.SelectedIndex;
        //                lv = listView_Image.SelectedItems[0];
        //                pictBox1.Image = WebGUIGatway.getpicture(lv.SubItems[3].Text.Trim());
        //                pictBox2.Image = WebGUIGatway.getpicture(lv.SubItems[6].Text.Trim());
        //                pictBox3.Image = WebGUIGatway.getpicture(lv.SubItems[9].Text.Trim());
        //                pictBox4.Image = WebGUIGatway.getpicture(lv.SubItems[12].Text.Trim());
        //                pictBox5.Image = WebGUIGatway.getpicture(lv.SubItems[15].Text.Trim());

        //                txtImagenotes.Text = lv.SubItems[4].Text;

        //                txtPic1.Text = lv.SubItems[3].Text.Trim();
        //                txtPic2.Text = lv.SubItems[6].Text;
        //                txtPic3.Text = lv.SubItems[9].Text;
        //                txtPic4.Text = lv.SubItems[12].Text;
        //                txtPic5.Text = lv.SubItems[15].Text;
        //            }
        //        }
        //        private void pictBox2_Click(object sender, EventArgs e)
        //        {
        //            PictureBox pbox = sender as PictureBox;
        //            if (pbox.Name == "pictBox2" && !string.IsNullOrWhiteSpace(txtPic2.Text))
        //            {
        //                pictBox1.Image = WebGUIGatway.getpicture(txtPic2.Text);
        //                txtPic1.Text = txtPic2.Text;
        //            }
        //            else if (pbox.Name == "pictBox3" && !string.IsNullOrWhiteSpace(txtPic3.Text))
        //            {
        //                pictBox1.Image = WebGUIGatway.getpicture(txtPic3.Text);
        //                txtPic1.Text = txtPic3.Text;
        //            }
        //            else if (pbox.Name == "pictBox4" && !string.IsNullOrWhiteSpace(txtPic4.Text))
        //            {
        //                pictBox1.Image = WebGUIGatway.getpicture(txtPic4.Text);
        //                txtPic1.Text = txtPic4.Text;
        //            }
        //            else if (pbox.Name == "pictBox5" && !string.IsNullOrWhiteSpace(txtPic5.Text))
        //            {
        //                pictBox1.Image = WebGUIGatway.getpicture(txtPic5.Text);
        //                txtPic1.Text = txtPic5.Text;
        //            }

        //            /*     if (!string.IsNullOrWhiteSpace( pbox.Image.ToString()))
        //                 {
        //                     string id = pbox.Name.Substring(pbox.Name.Length - 1, 1), txt = "txtPic"; // .PadRight(1)
        //                    // txt = txt + id + ".Text";
        //                     //txtPic1.Text = txt;
        //                     txtPic1.Text = txtPic2.Text;
        //                 }*/
        //        }

        ////        private void btnRetrieveCaseNote_Click(object sender, EventArgs e)
        ////        {
        ////            timer_Doc.Enabled = false;
        ////            DialogResult result = MessageBox.Show("Confirm to Retrieve From Auto-Saved Case Note for this Visit...", "DOCTORS CONSULT", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        ////            if (result == DialogResult.Yes)
        ////                txtcurrentrecs.Text = savedCaseNote;
        ////            timer_Doc.Enabled = true;
        ////            txtcurrentrecs.Focus();
        ////            return;

        ////        }

        //        private void timer_Doc_Tick(object sender, EventArgs e)
        //        {
        //            /* note 1000 = 1 second
        //  1 min = 1000x60 = 60000
        //  5 min = 60000x5 = 300000
        //  30 min = 1800000
        //  1 hr = 60000x60 = 3600000*/
        //            if (savedCaseNote == null || txtcurrentrecs == null || msection != "4")
        //                return;
        //            if (savedCaseNote.Length > txtcurrentrecs.Text.Trim().Length)
        //            {
        //                btnRetrieveCaseNote.Enabled = true;
        //            }
        //            else
        //            {
        //                savedCaseNote = txtcurrentrecs.Text.Trim();
        //                btnRetrieveCaseNote.Enabled = false;
        //            }
        //        }

        ////        private void combFacilitySpaceDef_SelectedIndexChanged(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(combFacilitySpaceDef.Text))
        ////                return;
        ////            combFacilitySpaceDef_LostFocus(null, null);
        ////        }

        ////        private void combFacilityreg_SelectedIndexChanged(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(combFacilityreg.Text))
        ////                return;
        ////            combFacilityreg_Leave(null, null);
        ////        }

        ////        private void combProcedureSu_SelectedIndexChanged(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(combProcedureSu.Text))
        ////                return;

        ////            combProcedureSu_LostFocus(null, null);

        ////            //combProcedureSu_Leave(null, null);
        ////        }

        ////        private void combprocedureSI_SelectedIndexChanged(object sender, EventArgs e)
        ////        {
        ////            if (string.IsNullOrWhiteSpace(combprocedureSI.Text))
        ////                return;
        ////            combprocedureSI_Leave(null, null);
        ////        }

        ////        private void txtcurrentrecs_LostFocus(object sender, EventArgs e)
        ////        {
        ////            // timer_Adm.Enabled = timer_Doc.Enabled = true;
        ////        }

        ////        private void txtreferenceReg_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            txtreferenceReg_LostFocus(null, null);
        ////        }

        ////        private void txtgroupcode_Reg_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            SelectNextControl(ActiveControl, true, true, true, true);
        ////        }

        ////        private void txtPatNoReg_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            txtPatNoReg_LostFocus(null, null);
        ////        }

        ////        private void txtBedNo_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            txtBedNo_LostFocus(null, null);
        ////        }

        ////        private void txtreferenceRev_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            txtreferenceRev_LostFocus(null, null);
        ////        }

        ////        private void txtReference_BC_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            txtReference_BC_Leave(null, null);
        ////        }

        ////        private void txtReference_D_EnterKeyDown(object objSender, KeyEventArgs objArgs)
        ////        {
        ////            txtReference_D_LostFocus(null, null);
        ////        }

        //        //     private void btnReleaseBedspace_Click(object sender, EventArgs e)
        //        //     {
        //        //         /*if messagebox( "Confirm to release Bed Space...",4+32+0,"Release Bed Space")=6
        //        //	replace admspace.occupant with ""
        //        //	return
        //        //endif*/
        //        //         if (recno == -1 || string.IsNullOrWhiteSpace(listView1.Items[recno].SubItems[12].Text))
        //        //             return;
        //        //         DialogResult result1 = MessageBox.Show("Confirm to release Bed Space..." + listView1.Items[recno].SubItems[2].Text + ":" + listView1.Items[recno].SubItems[3].Text, "Release Bed Space", MessageBoxButtons.YesNo, MessageBoxIcon.Question, MessageBoxDefaultButton.Button1);
        //        //         if (result1 == DialogResult.No)
        //        //             return;
        //        //         string updstr = "update admspace set occupant = '' where recid = '" + listView1.Items[recno].SubItems[12].Text + "'";
        //        //         bissclass.UpdateRecords(updstr, "MR");
        //        //         MessageBox.Show("Record Updated...");
        //        //         combFacilitySpaceDef.Focus();
        //        //         return;
        //        //     }

        //        private void btnDialysis_Click(object sender, EventArgs e)
        //        {

        //            frmDialysisObservation dialysis = new frmDialysisObservation(txtgroupcode_Rev.Text, txtpatientnoRev.Text, woperator, msection, true);
        //            dialysis.Show();
        //        }

        //        private void btnTemplateRev_Click(object sender, EventArgs e)
        //        {
        //            DocsTemplates docstemplate = new DocsTemplates(woperator);
        //            docstemplate.ShowDialog();
        //            if (Session["RtnFormat"] != null)
        //            {
        //                txtcurrentrecs.Text = txtcurrentrecs.Text + "\r\n\r\n" + Session["RtnFormat"].ToString();
        //                txtcurrentrecs.Select();
        //            }
        //        }

        ////        void displayPatientPicture(PictureBox picbox, string ximage)
        ////        {
        ////            //PicSelected = bchain.PICLOCATION;
        ////            if (!string.IsNullOrWhiteSpace(ximage))
        ////            {
        ////                picbox.Image = WebGUIGatway.getpicture(ximage);
        ////            }
        ////        }

        //        #endregion
        #endregion


    }
}